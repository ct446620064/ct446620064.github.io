{"meta":{"title":"小泽のブログ","subtitle":"","description":"","author":"realxz","url":"http://example.com","root":"/"},"pages":[{"title":"404","date":"2021-01-01T13:43:02.000Z","updated":"2021-01-01T13:43:02.036Z","comments":true,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":""},{"title":"search","date":"2021-01-01T13:42:55.000Z","updated":"2021-01-01T13:42:55.116Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker常用命令","slug":"Docker","date":"2021-01-03T08:13:14.000Z","updated":"2021-01-05T15:56:45.680Z","comments":true,"path":"2021/01/03/Docker/","link":"","permalink":"http://example.com/2021/01/03/Docker/","excerpt":"","text":"Docker和虚拟机的不同： 传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。 容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。 每个容器之间是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。 Docker镜像命令查看镜像使用方式： docker images [option] [repository[:TAG]] 示例： 12345678910111213$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest bf756fb1ae65 12 months ago 13.3kB# 解释#只显示镜像ID$ docker images -q7c3ce33e4a1fec3789272a09698ab9017c5b19d9cb152dda ​​ 字段名 含义 REPOSITORY 镜像的仓库源 TAG 镜像的标签 IMAGE ID 镜像ID CREATED 镜像创建时间 SIZE 镜像的大小 Option选项 描述 –all , -a # 显示所有镜像 (default hides intermediate images) –digests # Show digests –filter , -f # Filter output based on conditions provided –format # Pretty-print images using a Go template –no-trunc #Don’t truncate output –quiet , -q # Only show image IDs 搜索镜像使用方式： docker search [OPTION] TERM 示例： 1234567$ docker search mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 10339 [OK] mariadb MariaDB is a community-developed fork of MyS… 3832 [OK] mysql/mysql-server Optimized MySQL Server Docker images. Create… 757 [OK].... 12345# 搜索时添加过滤条件为STARS不小于3000$ docker search mysql --filter=STARS=3000NAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 10339 [OK] mariadb MariaDB is a community-developed fork of MyS… 3832 [OK] 查看某个命令的可选项使用方式： docker [命令名称] –help 示例： 12345678910111213$ docker images --helpUsage: docker images [OPTIONS] [REPOSITORY[:TAG]]List imagesOptions: -a, --all Show all images (default hides intermediate images) --digests Show digests -f, --filter filter Filter output based on conditions provided --format string Pretty-print images using a Go template --no-trunc Don&#x27;t truncate output -q, --quiet Only show numeric IDs 下载镜像使用方式： docker pull [OPTION] NAME[:TAG|@DIGEST] 示例： 123456789101112131415161718$ docker pull mysqlUsing default tag: latestlatest: Pulling from library/mysql6ec7b7d162b2: Pull complete # 分层下载fedd960d3481: Pull complete 7ab947313861: Pull complete 64f92f19e638: Pull complete 3e80b17bff96: Pull complete 014e976799f9: Pull complete 59ae84fee1b3: Pull complete ffe10de703ea: Pull complete 657af6d90c83: Pull complete 98bfb480322c: Pull complete 6aa3859c4789: Pull complete 1ed875d851ef: Pull complete Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 签名Status: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest # 真实地址 如果不写TAG，则默认下载最新的镜像。 以下两个命令等价： 12$ docker pull mysql$ docker pull docker.io/library/mysql:latest 指定版本下载： 12345678910111213$ docker pull mysql:5.75.7: Pulling from library/mysql6ec7b7d162b2: Already exists fedd960d3481: Already exists 7ab947313861: Already exists 64f92f19e638: Already exists 3e80b17bff96: Already exists 014e976799f9: Already exists 59ae84fee1b3: Already exists 7d1da2a18e2e: Pull complete 301a28b700b9: Downloading [============&gt; ] 26.25MB/108.3MB529dc8dbeaf3: Download complete bc9d021dc13f: Download complete 删除镜像使用方式： docker rmi [OPTIONS] IMAGE [IMAGE…] 示例： 123456$ docker rmi -f 882aebcdb308Deleted: sha256:882aebcdb308cd2f1dc333c3fc1676614ea0bd9b4379d0bfdf5db55640e56e56Deleted: sha256:7da399cc68d63c6d3540bad15369c46e971443bc73981df585a7a37aefd3983aDeleted: sha256:b480ebcefedc620f17a24d5c61a336361c075db1aaf57e2a1de32b97f69eb3a4Deleted: sha256:957eb1ae5cf15a8089a9b19aaacbacdaf06fb5045d6fb2bb95c3c37961b09081 删除所有的镜像： 1$ docker rmi -f $(docker images -aq) 其中$(docker images -aq)为查询所有镜像的ID Docker容器命令安装centos进行测试 1$ docker pull centos 新建容器并运行 docker run [OPTIONS] IMAGE [COMMAND] [ARG…] 示例： 1234$ docker run -it centos /bin/bash # 运行并进入容器[root@fbddb27d188f /]# ls # 查看容器内的centosbin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var[root@fbddb27d188f /]# exit # 从容器退回主机 查看容器 docker ps [OPTIONS] 示例： 12345$ docker ps # 查看当前正在运行的容器CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES$ docker ps -all # 列出当前运行的容器+查看曾经运行的容器CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESfbddb27d188f centos &quot;/bin/bash&quot; 14 minutes ago Exited (0) 3 minutes ago happy_kowalevski Option名称 描述 -all, -a 显示所有容器 –last, -n 显示最近创建的n个容器 –quiet, -q 只显示容器的ID 退出容器退出并关闭容器 exit 退出但不关闭容器 Ctrl + P + Q 删除容器使用方式： docker rm [OPTIONS] CONTAINER [CONTAINER…] Option选项 描述 --force , -f Force the removal of a running container (uses SIGKILL) --link , -l Remove the specified link --volumes , -v Remove anonymous volumes associated with the container 示例： 12$ docker rm fbddb27d188ffbddb27d188f 启动容器 1$ docker start [容器ID] 重启容器 1$ docker restart [容器ID] 停止容器 1$ docker stop [容器ID] 强制停止当前容器 1$ docker kill [容器ID] 常用其他命令后台运行容器 1234567891011$ docker run -d centosf3cc16b38e9dc3e281681f226128b3f084aec79b9d9c27721a83f36189fdaebc# lize @ lize-linux in ~ [21:15:59] $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES# lize @ lize-linux in ~ [21:16:04] $ docker ps -all CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf3cc16b38e9d centos &quot;/bin/bash&quot; 12 seconds ago Exited (0) 11 seconds ago elegant_archimedes docker run -d centos中的-d表示后台运行，但是该后台运行必须对应一个前台进程，否则docker会将这个容器停止。 查看日志 1$ docker logs -tf --tail 10 [容器ID] -tf表示显示日志， --tail [数字]表示要显示日志条数。 查看容器内部进程 1$ docker top [容器ID] 示例： 123$ docker top 8326642ceb7d UID PID PPID C STIME TTY TIME CMDroot 20286 20264 0 21:46 pts/0 00:00:00 /bin/bash 查看容器的元数据 1$ docker inspect [容器ID] 进入当前正在运行的容器 1$ docker exec -it [容器ID] bashshell 或者 1$ docker attach [容器ID] 两者区别：docker exec 在进入容器后开启一个新的终端，docker attach 在进入容器后使用正在执行的一个终端。 将容器内部的文件拷贝到主机上 1$ docker cp [容器ID]:[容器中的文件路径] [主机文件夹路径] ![](/home/lize/Pictures/Screenshot from 2021-01-05 23-14-52.png) 作业docker部署nginx并完成端口映射 12$ docker run -d --name nginx01 -p 3344:80 nginxf358c945ae0eed75160c006a0a3fac73028c9aa73f1ed2b87e6c12d708aa17fe 端口映射原理： 访问测试：","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"}]},{"title":"CodeLite调试时查看数组内容","slug":"CodeLite调试时查看数组内容","date":"2021-01-03T04:04:33.000Z","updated":"2021-01-03T04:06:18.056Z","comments":true,"path":"2021/01/03/CodeLite调试时查看数组内容/","link":"","permalink":"http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/","excerpt":"","text":"添加监视的变量名为： 1(int[10]*)a","categories":[],"tags":[{"name":"CodeLite","slug":"CodeLite","permalink":"http://example.com/tags/CodeLite/"}]},{"title":"vscode配置c++环境","slug":"vscode配置c-环境","date":"2021-01-02T09:52:52.000Z","updated":"2021-01-02T10:09:52.737Z","comments":true,"path":"2021/01/02/vscode配置c-环境/","link":"","permalink":"http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/","excerpt":"","text":"vscode配置c++环境1.配置c++ IntelliSense使用F1 快捷键打开命令选项，输入C/C++:Edit configuration，然后在.vscode文件夹自动生成c_cpp_properties.json配置文件。 2.launch.json配置文件在debug界面中添加配置，然后选c++(gdb/lgdb)选项，然后自动生成launch.json配置文件，该配置文件主要用于调试时的加载控制。 3.tasks.json配置文件在命令窗口中输入task，选择task:configure task选项，生成task.json配置文件。 注意：task.json中的label属性值要和launch.json中preLaunchTask属性值相同。","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"article3","slug":"article/index","date":"2021-01-02T07:44:44.000Z","updated":"2021-01-02T07:45:32.391Z","comments":true,"path":"2021/01/02/article/index/","link":"","permalink":"http://example.com/2021/01/02/article/index/","excerpt":"","text":"new 了一个layout为page的文章","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-01-01T07:22:59.521Z","updated":"2021-01-01T07:22:59.521Z","comments":true,"path":"2021/01/01/hello-world/","link":"","permalink":"http://example.com/2021/01/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"CodeLite","slug":"CodeLite","permalink":"http://example.com/tags/CodeLite/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]}