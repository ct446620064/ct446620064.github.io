{"meta":{"title":"ct446620064","subtitle":"","description":"","author":"realxz","url":"http://example.com","root":"/"},"pages":[{"title":"404","date":"2021-01-01T13:43:02.000Z","updated":"2021-01-01T13:43:02.036Z","comments":true,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":""},{"title":"search","date":"2021-01-01T13:42:55.000Z","updated":"2021-01-01T13:42:55.116Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker","slug":"Docker","date":"2021-01-03T08:13:14.000Z","updated":"2021-01-05T08:39:23.747Z","comments":true,"path":"2021/01/03/Docker/","link":"","permalink":"http://example.com/2021/01/03/Docker/","excerpt":"","text":"Docker和虚拟机的不同： 传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。 容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。 每个容器之间是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。 Docker镜像命令查看镜像使用方式： docker images [option] [repository[:TAG]] 示例： 1234567891011121314151617181920212223242526$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest bf756fb1ae65 12 months ago 13.3kB# 解释REPOSITORY 镜像的仓库源TAG 镜像的标签IMAGE ID 镜像IDCREATED 镜像创建时间SIZE 镜像的大小# 可选项--all , -a # 显示所有镜像 (default hides intermediate images)--digests # Show digests--filter , -f # Filter output based on conditions provided--format # Pretty-print images using a Go template--no-trunc # 3Don’t truncate output--quiet , -q # Only show image IDs#只显示镜像ID$ docker images -q7c3ce33e4a1fec3789272a09698ab9017c5b19d9cb152dda 搜索镜像使用方式： docker search [OPTION] TERM 示例： 123456789101112$ docker search mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 10339 [OK] mariadb MariaDB is a community-developed fork of MyS… 3832 [OK] mysql/mysql-server Optimized MySQL Server Docker images. Create… 757 [OK]....# 搜索时添加过滤条件为STARS不小于3000$ docker search mysql --filter=STARS=3000NAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 10339 [OK] mariadb MariaDB is a community-developed fork of MyS… 3832 [OK] 搜索时 查看某个命令的可选项使用方式： docker [命令名称] –help 示例： 12345678910111213$ docker images --helpUsage: docker images [OPTIONS] [REPOSITORY[:TAG]]List imagesOptions: -a, --all Show all images (default hides intermediate images) --digests Show digests -f, --filter filter Filter output based on conditions provided --format string Pretty-print images using a Go template --no-trunc Don&#x27;t truncate output -q, --quiet Only show numeric IDs 下载镜像使用方式： docker pull [OPTION] NAME[:TAG|@DIGEST] 示例：","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"}]},{"title":"CodeLite调试时查看数组内容","slug":"CodeLite调试时查看数组内容","date":"2021-01-03T04:04:33.000Z","updated":"2021-01-03T04:06:18.056Z","comments":true,"path":"2021/01/03/CodeLite调试时查看数组内容/","link":"","permalink":"http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/","excerpt":"","text":"添加监视的变量名为： 1(int[10]*)a","categories":[],"tags":[{"name":"CodeLite","slug":"CodeLite","permalink":"http://example.com/tags/CodeLite/"}]},{"title":"vscode配置c++环境","slug":"vscode配置c-环境","date":"2021-01-02T09:52:52.000Z","updated":"2021-01-02T10:09:52.737Z","comments":true,"path":"2021/01/02/vscode配置c-环境/","link":"","permalink":"http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/","excerpt":"","text":"vscode配置c++环境1.配置c++ IntelliSense使用F1 快捷键打开命令选项，输入C/C++:Edit configuration，然后在.vscode文件夹自动生成c_cpp_properties.json配置文件。 2.launch.json配置文件在debug界面中添加配置，然后选c++(gdb/lgdb)选项，然后自动生成launch.json配置文件，该配置文件主要用于调试时的加载控制。 3.tasks.json配置文件在命令窗口中输入task，选择task:configure task选项，生成task.json配置文件。 注意：task.json中的label属性值要和launch.json中preLaunchTask属性值相同。","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"article3","slug":"article/index","date":"2021-01-02T07:44:44.000Z","updated":"2021-01-02T07:45:32.391Z","comments":true,"path":"2021/01/02/article/index/","link":"","permalink":"http://example.com/2021/01/02/article/index/","excerpt":"","text":"new 了一个layout为page的文章","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-01-01T07:22:59.521Z","updated":"2021-01-01T07:22:59.521Z","comments":true,"path":"2021/01/01/hello-world/","link":"","permalink":"http://example.com/2021/01/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"CodeLite","slug":"CodeLite","permalink":"http://example.com/tags/CodeLite/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]}