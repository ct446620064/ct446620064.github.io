<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小泽のブログ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-08T07:26:48.808Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>realxz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PPA</title>
    <link href="http://example.com/2021/01/07/PPA/"/>
    <id>http://example.com/2021/01/07/PPA/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2021-01-08T07:26:48.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PPA-Persional-Package-Archive"><a href="#PPA-Persional-Package-Archive" class="headerlink" title="PPA(Persional Package Archive)"></a>PPA(Persional Package Archive)</h2><p>参考资料：<a href="https://itsfoss.com/ppa-guide/">https://itsfoss.com/ppa-guide/</a></p><p>私人包存档，这暗示对一个开发人员独有的东西，是非官方支持的发布。</p><p>Ubuntu提供了一个叫做Launchpad的平台使软件开发人员能够创建属于他们自己的仓库。你可以将<code>PPA repository</code>加入到你的<code>sources.list</code>里面当你更新你的系统时，你的系统将知道新软件的可用性，并且你可以使用标准的<code>sudo apt install</code>命令安装这个软件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将the PPA repository添加到list中</span></span><br><span class="line">sudo add-apt-repository ppa:dr-akulavich/lighttable</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新the list of the packages that can be installed on the system</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装the package</span></span><br><span class="line">sudo apt-get install lighttable-installer</span><br></pre></td></tr></table></figure><blockquote><p>sudo add-apt-repository ppa:dr-akulavich/lighttable</p></blockquote><p>这个命令中没有URL，是因为the tool被设计使用抽象信息表达URL。</p><p>如果你添加<code>ppa:dr-akulavich/lighttable</code>，那么你就会获得Light Table，但是如果你添加<code>ppa:dr-akulavich</code>，那么你就会获得一个更高级库里面所有的库和软件包，它是分层的。</p><p>基本上，当你使用<code>add-apt-repository</code>命令添加<code>PPA</code>时所做的操作就如同运行下面这些命令：</p><blockquote><p>deb <a href="http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu">http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu</a> YOUR_UBUNTU_VERSION_HERE main<br>deb-src <a href="http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu">http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu</a> YOUR_UBUNTU_VERSION_HERE main</p></blockquote><p>上面这两行是添加任何仓库（repositories）到你的<code>sources.list</code>的传统方式。</p><p>但是PPA对你来说是自动的，无需担心精准的<code>repository URL</code>地址和操作系统版本。</p><p>一个要提及的重要的事就是当你使用PPA的时候，他不会改变你的原来的<code>sources.list</code>文件，而它会在<code>/etc/apt/sources.d</code>目录中创建两个文件，一个list文件和一个备份文件（后缀为save）。</p><p>以list为后缀的文件包含添加关于库的信息的命令。</p><p>这是一个确保添加PPA不会弄乱原来的<code>sources.list</code>文件的安全的措施，也可以帮助删除PPA。</p><h2 id="为什么是PPA？为什么不是DEB包？"><a href="#为什么是PPA？为什么不是DEB包？" class="headerlink" title="为什么是PPA？为什么不是DEB包？"></a>为什么是PPA？为什么不是DEB包？</h2><p>你也许会问为什么你应该使用PPA，当涉及到使用不是每个人偏爱的命令行的时候。为什么不直接发布能详细安装的DEB包？</p><p>答案在于更新过程。如果你使用DEB包安装软件，则不能保证安装的软件在你运行<code>sudo apt update &amp;&amp; sudo apt upgrade</code>命令时能被更新。</p><p>因为apt upgrade过程依赖<code>sources.list</code>，如果没有软件条目，那么他就无法通过标准软件更新获得更新。</p><p>所以，这就意味着使用DEB包安装的软件将永远不会获得更新？不是，这要看这个包是如何被创建的。</p><p>一些开发者自动添加一个条目到<code>sources.list</code>，然后这个软件就像常规软件那样更新。Google Chrome就是这样一个例子。</p><p>当你试图运行一些软件时，它会通知你新版本的可用性。你将不得不下载一个新的DEB包，然后再次运行以更新当前软件到一个新的版本。Oracle Virtual Box就是这样一个例子。</p><p>对于剩下的DEB包，你将不得不手动寻找一个更新，并且这样并不方便，特别是如果你的软件是为了beta测试者。你需要频繁地添加更多的更新。这就是PPA抢救的地方。</p><h2 id="官方的PPA-vs-非官方的PPA"><a href="#官方的PPA-vs-非官方的PPA" class="headerlink" title="官方的PPA vs 非官方的PPA"></a>官方的PPA vs 非官方的PPA</h2><p>你可能听说过官方的PPA和非官方的PPA。两者有什么不同？</p><p>当开发者为他们的软件创建一个PPA时，这个PPA就被称作官方的PPA。很明显，它来自于项目开发人员。</p><p>但是有时候，个人创建一个项目的PPA，但这个项目由其他人创建。</p><p>为什么有些人这样做？因为有些开发人员仅仅提供软件的源代码，并且你知道<a href="https://itsfoss.com/install-software-from-source-code/">installing software from source code in Linux</a> 是痛苦的，不是所有人可以或者愿意这样做。</p><p>这就是为什么志愿者自己根据这些源代码创建PPA，以便其他使用者能容易地安装软件，毕竟，使用那3行命令要比源代码安装容易的多。</p><h2 id="确保PPA对你的发行版本是可用的"><a href="#确保PPA对你的发行版本是可用的" class="headerlink" title="确保PPA对你的发行版本是可用的"></a>确保PPA对你的发行版本是可用的</h2><p>当在Ubuntu或其他基于Debian的发行版来说，有一点事情要牢记。</p><p>不是所有的PPA对你的特定的发行版是可用的。你应该知道<a>哪一个Ubuntu版本</a>是你正在使用的。发行的codename是重要的，因为当你转到某个PPA网页时，你能看到那一个Ubuntu版本是PPA所支持的。</p><p>对于其他基于Ubuntu的发行版，你可以检查这目录<code>/etc/os-release</code>，找到Ubuntu 的版本信息。</p><p><a href="https://itsfoss.com/how-to-know-ubuntu-unity-version/">https://itsfoss.com/how-to-know-ubuntu-unity-version/</a></p><p>如何知道PPA的URL呢？在网络上简单搜索PPA的名称，如ppa:dr-akulavich/lighttable 并且你应该获得Launchpad网站的第一个结果，Launchpad是存储PPA的官方平台。在那你也能直接地去发布和搜索需要的PPA。</p><p>如果你没有核实并添加PPA，当你尝试去安装一个对你系统版本不可用的软件时，你可能看到一个错误：</p><blockquote><p>E: Unable to locate package</p></blockquote><p>更糟糕的是自从它被加入到你的<code>source.list</code>后，你每次运行软件更新（software updater），你将会看到一个错误：<a href="https://itsfoss.com/failed-to-download-repository-information-ubuntu-13-04/">Failed to download repository information</a></p><p>如果你在终端中运行<code>sudo apt update</code>命令，这可错误将会更详细地显示是哪一个库造成了这个问题。你能在输入命令后看到如下信息：</p><blockquote><p>W: Failed to fetch <a href="http://ppa.launchpad.net/venerix/pkg/ubuntu/dists/raring/main/binary-i386/Packages">http://ppa.launchpad.net/venerix/pkg/ubuntu/dists/raring/main/binary-i386/Packages</a>  404  Not Found<br>E: Some index files failed to download. They have been ignored, or old ones used instead.</p></blockquote><p>无需解释，明显是因为系统无法发现使用于你的版本的库。</p><p>还记得我们之前看到的库结构吗？APT将尝试在<code>http://ppa.launchpad.net/&lt;PPA_NAME&gt;/ubuntu/dists/Ubuntu_Version</code>这个位置寻找软件信息。</p><p>并且如果PPA对于指定版本是不可用的，他将永远不能打开这个URL，并且你会看到著名的404错误。</p><h2 id="为什么PPAs不是对所有的Ubuntu发行版都可用呢？"><a href="#为什么PPAs不是对所有的Ubuntu发行版都可用呢？" class="headerlink" title="为什么PPAs不是对所有的Ubuntu发行版都可用呢？"></a>为什么PPAs不是对所有的Ubuntu发行版都可用呢？</h2><p>这是因为有人必须编译这个软件并且在特定版本上创建PPA。考虑到每6个月发行一次Ubuntu版本，为每一个Ubuntu发行版更新PPA是一个烦人的任务。</p><h2 id="如果PPA对你的版本是不可用，那么该如何安装应用程序？"><a href="#如果PPA对你的版本是不可用，那么该如何安装应用程序？" class="headerlink" title="如果PPA对你的版本是不可用，那么该如何安装应用程序？"></a>如果PPA对你的版本是不可用，那么该如何安装应用程序？</h2><p>尽管PPA对你的版本是不可用的，那么安装程序也是可能的。你仍然可以下载DEB文件，然后安装这个应用程序。</p><p>假设你转到Light Table PPA页面。使用刚刚所学的PPA的知识，你了解到PPA是对你的Ubuntu版本不可用。</p><p>你能做的是点击<code>View package details’</code></p><p>在那，你能点击一个包去揭露更多详情信息。你也将发现源代码和DEB文件。</p><p>我建议使用<a href="https://itsfoss.com/gdebi-default-ubuntu-software-center/">using Gdebi to install these DEB files</a>而不是软件中心，因为Gdebi是比处理依赖要好的多。</p><p>请注意，这种方式安装的软件包可能不会在未来更新。</p><p>我认为你已经阅读了关于添加PPAs足够多的内容。如何一处PPA并且由它安装的软件呢？</p><h2 id="如何删除PPA？"><a href="#如何删除PPA？" class="headerlink" title="如何删除PPA？"></a>如何删除PPA？</h2><p>我曾经写了关于如何删除PPA，我在这也会描述一些方法。</p><p><a href="https://itsfoss.com/how-to-remove-or-delete-ppas-quick-tip/">https://itsfoss.com/how-to-remove-or-delete-ppas-quick-tip/</a></p><p>我建议你删除从PPA中安装的软件之前先删除PPA。如果你仅仅移除PPA，已安装的软件仍然在你的系统中，他不会获取任何更新。你不想这样，对吗？</p><p>因此问题来了，如何知道那个应用使用哪个PPA安装的呢？</p><h2 id="寻找由PPA安装的package并删除他们"><a href="#寻找由PPA安装的package并删除他们" class="headerlink" title="寻找由PPA安装的package并删除他们"></a>寻找由PPA安装的package并删除他们</h2><p>Ubuntu的软件中心不会帮助。你将必须使用Synaptic package manager，它有更多高级特性。</p><p>你能在Ubuntu上安装Synaptic，或者使用以下命令：</p><blockquote><p>sudo apt install synaptic</p></blockquote><p>安装后启动Synaptic package manager，并选择Origin。你将看到各种各样的加入到系统中的库。PPA条目以PPA为前缀。点击他们查看PPA可用的软件包。已安装的软件在它之前将会有适当的符号。</p><p>在你发现软件包之后，你能从Synaptic上删除他们。另外，你总是能使用这个命令：</p><blockquote><p>sudo apt remove package_name</p></blockquote><p>在你删除由PPA安装的软件包后，你能从你的<code>sources.list</code>中继续删除这个PPA。</p><h2 id="图形化地删除PPA"><a href="#图形化地删除PPA" class="headerlink" title="图形化地删除PPA"></a>图形化地删除PPA</h2><p>打开Software &amp; Updates，然后打开Other Software标签。寻找你要删除的PPA。</p><p>在这你有两个选项。要不取消选定PPA，要不你选择Remove选项。</p><p>两者不同的是当你取消选定PPA条目时，你的系统将在<code>/etc/apt/sources.list.d </code>目录下<code>ppa_name.list </code>文件中注释掉库条目，但是你选择Remove选项它就会从<code>/etc/apt/sources.list.d</code>目录下<code>ppa_name.list</code>文件中删除库条目。</p><p>这两种情况，<code>ppa_name.list</code>文件存在于那个目录中，即使它是空的。</p><h2 id="使用PPA安全吗？"><a href="#使用PPA安全吗？" class="headerlink" title="使用PPA安全吗？"></a>使用PPA安全吗？</h2><p>这是一个主观性的问题。纯粹主义者讨厌PPA，因为大多数情况下PPAs是来自与第三方开发者。但是与此同时，由于提供了一个更容易的安装选项，PPAs是在Debian/Ubuntu世界是受欢迎的。</p><p>就安全性而言，你使用PPA和Linux系统受到恶意软件的攻击或劫持是几乎不可能的。到目前为止，我想不起这种偶然事件曾经发生过。</p><p>官方PPAs能被使用，这无需多想。使用非官方PPA完全取决于你的决定。</p><p>根据经验，如果该程序需要sudo权限才能运行，则应避免通过第三方PPA安装该程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PPA-Persional-Package-Archive&quot;&gt;&lt;a href=&quot;#PPA-Persional-Package-Archive&quot; class=&quot;headerlink&quot; title=&quot;PPA(Persional Package Archive)&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://example.com/2021/01/03/Docker/"/>
    <id>http://example.com/2021/01/03/Docker/</id>
    <published>2021-01-03T08:13:14.000Z</published>
    <updated>2021-01-07T08:51:51.018Z</updated>
    
    <content type="html"><![CDATA[<p>Docker和虚拟机的不同：</p><ul><li>传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。</li><li>容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。</li><li>每个容器之间是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。</li></ul><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>使用方式：</p><blockquote><p>docker images [option] [repository[:TAG]]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world                      latest              bf756fb1ae65        12 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">只显示镜像ID</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images -q</span></span><br><span class="line">7c3ce33e4a1f</span><br><span class="line">ec3789272a09</span><br><span class="line">698ab9017c5b</span><br><span class="line">19d9cb152dda</span><br></pre></td></tr></table></figure><p>​<br>​       </p><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>镜像的仓库源</td></tr><tr><td>TAG</td><td>镜像的标签</td></tr><tr><td>IMAGE ID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像创建时间</td></tr><tr><td>SIZE</td><td>镜像的大小</td></tr></tbody></table><table><thead><tr><th>Option选项</th><th>描述</th></tr></thead><tbody><tr><td>–all , -a</td><td># 显示所有镜像 (default hides intermediate images)</td></tr><tr><td>–digests</td><td># Show digests</td></tr><tr><td>–filter , -f</td><td># Filter output based on conditions provided</td></tr><tr><td>–format</td><td># Pretty-print images using a Go template</td></tr><tr><td>–no-trunc</td><td>#Don’t truncate output</td></tr><tr><td>–quiet , -q</td><td># Only show image IDs</td></tr></tbody></table><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>使用方式：</p><blockquote><p>docker search [OPTION] TERM</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10339               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3832                [OK]                </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   757                                     [OK]</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索时添加过滤条件为STARS不小于3000</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker search mysql --filter=STARS=3000</span></span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   10339               [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3832                [OK]         </span><br></pre></td></tr></table></figure><h3 id="查看某个命令的可选项"><a href="#查看某个命令的可选项" class="headerlink" title="查看某个命令的可选项"></a>查看某个命令的可选项</h3><p>使用方式：</p><blockquote><p>docker [命令名称] –help</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage:docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show numeric IDs</span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>使用方式：</p><blockquote><p>docker pull [OPTION] NAME[:TAG|@DIGEST] </p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Pull complete  # 分层下载</span><br><span class="line">fedd960d3481: Pull complete </span><br><span class="line">7ab947313861: Pull complete </span><br><span class="line">64f92f19e638: Pull complete </span><br><span class="line">3e80b17bff96: Pull complete </span><br><span class="line">014e976799f9: Pull complete </span><br><span class="line">59ae84fee1b3: Pull complete </span><br><span class="line">ffe10de703ea: Pull complete </span><br><span class="line">657af6d90c83: Pull complete </span><br><span class="line">98bfb480322c: Pull complete </span><br><span class="line">6aa3859c4789: Pull complete </span><br><span class="line">1ed875d851ef: Pull complete </span><br><span class="line">Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br></pre></td></tr></table></figure><p>如果不写TAG，则默认下载最新的镜像。</p><p>以下两个命令等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull docker.io/library/mysql:latest</span></span><br></pre></td></tr></table></figure><p>指定版本下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Already exists </span><br><span class="line">fedd960d3481: Already exists </span><br><span class="line">7ab947313861: Already exists </span><br><span class="line">64f92f19e638: Already exists </span><br><span class="line">3e80b17bff96: Already exists </span><br><span class="line">014e976799f9: Already exists </span><br><span class="line">59ae84fee1b3: Already exists </span><br><span class="line">7d1da2a18e2e: Pull complete </span><br><span class="line">301a28b700b9: Downloading [============&gt;                                      ]  26.25MB/108.3MB</span><br><span class="line">529dc8dbeaf3: Download complete </span><br><span class="line">bc9d021dc13f: Download complete </span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>使用方式：</p><blockquote><p>docker rmi [OPTIONS] IMAGE [IMAGE…]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f 882aebcdb308</span></span><br><span class="line">Deleted: sha256:882aebcdb308cd2f1dc333c3fc1676614ea0bd9b4379d0bfdf5db55640e56e56</span><br><span class="line">Deleted: sha256:7da399cc68d63c6d3540bad15369c46e971443bc73981df585a7a37aefd3983a</span><br><span class="line">Deleted: sha256:b480ebcefedc620f17a24d5c61a336361c075db1aaf57e2a1de32b97f69eb3a4</span><br><span class="line">Deleted: sha256:957eb1ae5cf15a8089a9b19aaacbacdaf06fb5045d6fb2bb95c3c37961b09081</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除所有的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -aq)</span></span><br></pre></td></tr></table></figure><p>其中<code>$(docker images -aq)</code>为查询所有镜像的ID</p><h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><p>安装centos进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull centos</span></span><br></pre></td></tr></table></figure><h3 id="新建容器并运行"><a href="#新建容器并运行" class="headerlink" title="新建容器并运行"></a>新建容器并运行</h3><blockquote><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it  centos /bin/bash <span class="comment"># 运行并进入容器</span></span></span><br><span class="line">[root@fbddb27d188f /]# ls # 查看容器内的centos</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@fbddb27d188f /]# exit # 从容器退回主机</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><blockquote><p>docker ps [OPTIONS]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps <span class="comment"># 查看当前正在运行的容器</span></span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -all <span class="comment"># 列出当前运行的容器+查看曾经运行的容器</span></span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">fbddb27d188f        centos              &quot;/bin/bash&quot;         14 minutes ago      Exited (0) 3 minutes ago                       happy_kowalevski</span><br></pre></td></tr></table></figure><table><thead><tr><th>Option名称</th><th>描述</th></tr></thead><tbody><tr><td>-all, -a</td><td>显示所有容器</td></tr><tr><td>–last, -n</td><td>显示最近创建的n个容器</td></tr><tr><td>–quiet, -q</td><td>只显示容器的ID</td></tr></tbody></table><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>退出并关闭容器</p><blockquote><p>exit</p></blockquote><p>退出但不关闭容器</p><blockquote><p>Ctrl + P + Q</p></blockquote><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>使用方式：</p><blockquote><p>docker rm [OPTIONS] CONTAINER [CONTAINER…]</p></blockquote><table><thead><tr><th>Option选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--force , -f</code></td><td>Force the removal of a running container (uses SIGKILL)</td></tr><tr><td><code>--link , -l</code></td><td>Remove the specified link</td></tr><tr><td><code>--volumes , -v</code></td><td>Remove anonymous volumes associated with the container</td></tr></tbody></table><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm fbddb27d188f</span></span><br><span class="line">fbddb27d188f</span><br></pre></td></tr></table></figure><p><strong>启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>强制停止当前容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> [容器ID]</span></span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d centos</span></span><br><span class="line">f3cc16b38e9dc3e281681f226128b3f084aec79b9d9c27721a83f36189fdaebc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lize @ lize-linux <span class="keyword">in</span> ~ [21:15:59]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span>           </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lize @ lize-linux <span class="keyword">in</span> ~ [21:16:04]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -all</span>      </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f3cc16b38e9d        centos              &quot;/bin/bash&quot;         12 seconds ago      Exited (0) 11 seconds ago                       elegant_archimedes</span><br></pre></td></tr></table></figure><p><code>docker run -d centos</code>中的-d表示后台运行，但是该后台运行必须对应一个前台进程，否则docker会将这个容器停止。</p><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -tf --tail 10 [容器ID]</span></span><br></pre></td></tr></table></figure><p><code>-tf</code>表示显示日志， <code>--tail [数字]</code>表示要显示日志条数。</p><p><strong>查看容器内部进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top [容器ID]</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top 8326642ceb7d</span>        </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                20286               20264               0                   21:46               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看容器的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it [容器ID] bashshell</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach [容器ID]</span></span><br></pre></td></tr></table></figure><p>两者区别：<code>docker exec </code>在进入容器后开启一个新的终端，<code>docker attach </code>在进入容器后使用正在执行的一个终端。</p><p><strong>将容器内部的文件拷贝到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp [容器ID]:[容器中的文件路径] [主机文件夹路径]</span></span><br></pre></td></tr></table></figure><p>![](/home/lize/Pictures/Screenshot from 2021-01-05 23-14-52.png)</p><h2 id="作业1：docker部署nginx"><a href="#作业1：docker部署nginx" class="headerlink" title="作业1：docker部署nginx"></a>作业1：docker部署nginx</h2><p>docker部署nginx并完成端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">f358c945ae0eed75160c006a0a3fac73028c9aa73f1ed2b87e6c12d708aa17fe</span><br></pre></td></tr></table></figure><h2 id="作业2：docker部署tomcat"><a href="#作业2：docker部署tomcat" class="headerlink" title="作业2：docker部署tomcat"></a>作业2：docker部署tomcat</h2><p>官方使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --rm tomcat</span></span><br></pre></td></tr></table></figure><p><code>--rm</code>表示停止容器后将无法查询到该容器，先在本地镜像中寻找tomcat，本地镜像没有则去docker 仓库下载。</p><p>后台运行tomcat：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d  -p 3355:8080 --name tomcat01 tomcat</span></span><br></pre></td></tr></table></figure><p>但是访问localhost:3355出现404,这是因为tomcat中的webapps目录中没有任何项目。</p><p>将webapps.dist中的项目复制到webapps中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@8be6bf1b1aa5:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br></pre></td></tr></table></figure><p>再次访问localhost:3355则出现tomcat欢迎界面。</p><h2 id="Docker可视化界面"><a href="#Docker可视化界面" class="headerlink" title="Docker可视化界面"></a>Docker可视化界面</h2><p>portainer是Docker图形化界面管理工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8088:9000 \</span></span><br><span class="line"><span class="bash">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span></span><br></pre></td></tr></table></figure><p>访问测试：localhost:8088</p><h2 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>如何得到镜像：</p><ul><li>从远程仓库下载</li><li>从朋友处拷贝</li><li>自己制作一个镜像Dockerfile</li></ul><h2 id="Commit命令"><a href="#Commit命令" class="headerlink" title="Commit命令"></a>Commit命令</h2><p>将现有容器打包成镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it tomcat /bin/bash</span></span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# cd webapps</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat/webapps# </span><br></pre></td></tr></table></figure><p>docker提供的tomcat镜像中的webapps目录下没有项目。</p><p>将webapp.dist目录中的项目复制到webapps目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# cd webapps</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure><p>将该容器打包成镜像：</p><p>使用方式：</p><blockquote><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker commit -a=<span class="string">&quot;lize&quot;</span> -m=<span class="string">&quot;add webapps apps&quot;</span> 53b95fab247a tomcat01:1.0</span></span><br></pre></td></tr></table></figure><p><code>-a</code>表示作者，<code>-m</code>表示提交的描述信息</p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><p>使用方式：</p><blockquote><p>$ docker run -it -v [主机目录]:[容器内目录] 容器 /bin/bash</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v /home/<span class="built_in">test</span>:/home centos /bin/bash</span></span><br></pre></td></tr></table></figure><p>实战：</p><p>将mysql配置目录和数据目录与主机目录进行双向绑定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql</span></span><br><span class="line">da57dd0c24e10ccec927594c1c5adc83a5ae60207697cd8a2d73ed0a9b777059</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker和虚拟机的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。&lt;/li&gt;
&lt;li&gt;容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。&lt;/li&gt;
&lt;li&gt;每个容器</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CodeLite调试时查看数组内容</title>
    <link href="http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/"/>
    <id>http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/</id>
    <published>2021-01-03T04:04:33.000Z</published>
    <updated>2021-01-03T04:06:18.056Z</updated>
    
    <content type="html"><![CDATA[<p>添加监视的变量名为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(int[10]*)a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;添加监视的变量名为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co</summary>
      
    
    
    
    
    <category term="CodeLite" scheme="http://example.com/tags/CodeLite/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c++环境</title>
    <link href="http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-02T09:52:52.000Z</published>
    <updated>2021-01-02T10:09:52.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode配置c-环境"><a href="#vscode配置c-环境" class="headerlink" title="vscode配置c++环境"></a>vscode配置c++环境</h1><h2 id="1-配置c-IntelliSense"><a href="#1-配置c-IntelliSense" class="headerlink" title="1.配置c++ IntelliSense"></a>1.配置c++ IntelliSense</h2><p>使用<code>F1</code> 快捷键打开命令选项，输入<code>C/C++:Edit configuration</code>，然后在<code>.vscode</code>文件夹自动生成<code>c_cpp_properties.json</code>配置文件。</p><h2 id="2-launch-json配置文件"><a href="#2-launch-json配置文件" class="headerlink" title="2.launch.json配置文件"></a>2.launch.json配置文件</h2><p>在debug界面中添加配置，然后选<code>c++(gdb/lgdb)</code>选项，然后自动生成<code>launch.json</code>配置文件，该配置文件主要用于调试时的加载控制。</p><h2 id="3-tasks-json配置文件"><a href="#3-tasks-json配置文件" class="headerlink" title="3.tasks.json配置文件"></a>3.tasks.json配置文件</h2><p>在命令窗口中输入task，选择<code>task:configure task</code>选项，生成<code>task.json</code>配置文件。</p><p>注意：<code>task.json</code>中的<code>label</code>属性值要和<code>launch.json</code>中<code>preLaunchTask</code>属性值相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vscode配置c-环境&quot;&gt;&lt;a href=&quot;#vscode配置c-环境&quot; class=&quot;headerlink&quot; title=&quot;vscode配置c++环境&quot;&gt;&lt;/a&gt;vscode配置c++环境&lt;/h1&gt;&lt;h2 id=&quot;1-配置c-IntelliSense&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/01/hello-world/"/>
    <id>http://example.com/2021/01/01/hello-world/</id>
    <published>2021-01-01T07:22:59.521Z</published>
    <updated>2021-01-01T07:22:59.521Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
