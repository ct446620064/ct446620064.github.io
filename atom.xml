<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小泽のブログ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-13T08:47:11.319Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>realxz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Docker Guide for Java</title>
    <link href="http://example.com/2021/01/12/A%20Docker%20Guide%20for%20Java/"/>
    <id>http://example.com/2021/01/12/A%20Docker%20Guide%20for%20Java/</id>
    <published>2021-01-11T16:00:00.000Z</published>
    <updated>2021-01-13T08:47:11.319Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：<a href="https://www.baeldung.com/docker-java-api">https://www.baeldung.com/docker-java-api</a></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>在这篇文章中，我们看一下另一个建立已久的平台的具体的API—-Java API Client for Docker</p><p>通过这篇文章，我们理解如何连接一个正在运行的Docker守护进程的方式，还有这个API为Java开发人员提供了什么样的重要智能。</p><h2 id="2-Maven-Dependency"><a href="#2-Maven-Dependency" class="headerlink" title="2.Maven Dependency"></a>2.Maven Dependency</h2><p>首先，我们需要添加一个主要的依赖到我们的pom.xml文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.docker-java&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.14&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>写这文章的时候，这个API的最新版本是3.0.14。每个发行版可以从<a href="https://github.com/docker-java/docker-java/releases">the github release page</a>或者 <a href="https://search.maven.org/classic/#search%7Cgav%7C1%7Cg%3A%22com.github.docker-java%22%20AND%20a%3A%22docker-java%22">the maven repository</a>浏览。</p><h2 id="3-使用Docker-Client"><a href="#3-使用Docker-Client" class="headerlink" title="3.使用Docker Client"></a>3.使用Docker Client</h2><p>DockerClient 是一个我们在Docker 引擎/守护进程和我们应用程序之间建立连接的地方。</p><p>默认情况下，Docker 守护进程只能在<font color="red"><em>unix:///var/run/docker.sock</em> file</font>访问。在本地，我们可以通过监听<strong>the Unix socket</strong>与Doocker引擎交流，并且这样无需任何配置。</p><p>在这，我可使用<em>DockerClientBuilder</em>类去创建一个连接，这个连接使用的是默认的配置：</p><blockquote><p><font color="blue">DockerClient dockerClient = DockerClientBuilder.getInstance().build();</font></p></blockquote><p>简单的，我们可以使用以下两步打开一个连接：</p><blockquote><font color="blue">DefaultDockerClientConfig.Builder config   = DefaultDockerClientConfig.createDefaultConfigBuilder();DockerClient dockerClient = DockerClientBuilder  .getInstance(config)  .build();</font></blockquote><p>由于引擎可以依赖其他特征，客户端也可以在不同条件下配置。</p><p>例如，the builder 接受一个server URL，如果引擎在端口2375可用的话，我们能更新连接值。</p><blockquote><font color="blue">DockerClient dockerClient= DockerClientBuilder.getInstance("tcp://docker.baeldung.com:2375").build();</font></blockquote><p>注意，我们需要在<font color="red">连接字符串 (connection string)</font>前加上<font color="purple">unix://</font> 或者 <font color="purple">tcp://</font>，这依赖于<font color="red">连接类型 (connection type)</font>。</p><p>进一步，我们能以一个更高级的配置，这个配置使用<em>DefaultDockerClientConfig</em>类。</p><blockquote><p>DefaultDockerClientConfig config<br> = DefaultDockerClientConfig.createDefaultConfigBuilder()<br>   .withRegistryEmail(“<a href="mailto:&#105;&#x6e;&#x66;&#x6f;&#64;&#x62;&#97;&#101;&#108;&#100;&#117;&#x6e;&#x67;&#x2e;&#x63;&#111;&#109;">&#105;&#x6e;&#x66;&#x6f;&#64;&#x62;&#97;&#101;&#108;&#100;&#117;&#x6e;&#x67;&#x2e;&#x63;&#111;&#109;</a>“)<br>    .withRegistryPassword(“baeldung”)<br>    .withRegistryUsername(“baeldung”)<br>    .withDockerCertPath(“/home/baeldung/.docker/certs”)<br>    .withDockerConfig(“/home/baeldung/.docker/“)<br>    .withDockerTlsVerify(“1”)<br>    .withDockerHost(“tcp://docker.baeldung.com:2376”).build();</p><p>DockerClient dockerClient = DockerClientBuilder.getInstance(config).build();</p></blockquote><p>同样地，我们可以使用Properties执行相同的方法。</p><blockquote><p>Properties properties = new Properties();<br>properties.setProperty(“registry.email”, “<a href="mailto:&#x69;&#x6e;&#x66;&#111;&#x40;&#98;&#x61;&#101;&#108;&#x64;&#x75;&#110;&#x67;&#x2e;&#99;&#x6f;&#109;">&#x69;&#x6e;&#x66;&#111;&#x40;&#98;&#x61;&#101;&#108;&#x64;&#x75;&#110;&#x67;&#x2e;&#99;&#x6f;&#109;</a>“);<br>properties.setProperty(“registry.password”, “baeldung”);<br>properties.setProperty(“registry.username”, “baaldung”);<br>properties.setProperty(“DOCKER_CERT_PATH”, “/home/baeldung/.docker/certs”);<br>properties.setProperty(“DOCKER_CONFIG”, “/home/baeldung/.docker/“);<br>properties.setProperty(“DOCKER_TLS_VERIFY”, “1”);<br>properties.setProperty(“DOCKER_HOST”, “tcp://docker.baeldung.com:2376”);</p><p>DefaultDockerClientConfig config<br>  = DefaultDockerClientConfig.createDefaultConfigBuilder()<br>    .withProperties(properties).build();</p><p>DockerClient dockerClient = DockerClientBuilder.getInstance(config).build();</p></blockquote><p>除非我们在源代码里面配置引擎设置，否则另一个选择是设置想符合的环境变量，以至于我们只考虑项目中DockerClient的默认的实例化。</p><blockquote><p>export DOCKER_CERT_PATH=/home/baeldung/.docker/certs<br>export DOCKER_CONFIG=/home/baeldung/.docker/<br>export DOCKER_TLS_VERIFY=1<br>export DOCKER_HOST=tcp://docker.baeldung.com:2376</p></blockquote><h2 id="4-容器管理"><a href="#4-容器管理" class="headerlink" title="4.容器管理"></a>4.容器管理</h2><p>这个API给予我们关于容器管理的各种各样的选择。让我们看看每一个。</p><h3 id="4-1容器列表-List-Container"><a href="#4-1容器列表-List-Container" class="headerlink" title="4.1容器列表 List Container"></a>4.1容器列表 List Container</h3><p>现在，我们已经建立了连接，我们能列出位于Docker主机上的所有正在运行的容器。</p><blockquote><p><font color="blue">List<Container> containers = dockerClient.listContainersCmd().exec();</font></p></blockquote><p>假如显示正在运行的容器不满足要求，我们能使用选项查询容器。</p><blockquote><p>List<Container> containers = dockerClient.listContainersCmd()<br>.withShowSize(true)<br>  .withShowAll(true)<br>  .withStatusFilter(“exited”).exec()</p></blockquote><p>它就等价于：</p><blockquote><p>$ docker ps -a -s -f status=exited<br>or<br> $ docker container ls -a -s -f status=exited</p></blockquote><h3 id="4-2创建容器"><a href="#4-2创建容器" class="headerlink" title="4.2创建容器"></a>4.2创建容器</h3><p>创建容器由<em>createContainerCmd</em>方法提供。我们可以使用以“with”为前缀的方法进行更复杂的声明。</p><p>假定我们有一个docker create 命令，定义了一个依赖于主机的MongoDB容器并在容器内部监听27017端口：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker create --name mongo \</span><br><span class="line">  --hostname=baeldung \</span><br><span class="line">  -e MONGO_LATEST_VERSION=<span class="number">3.6</span> \</span><br><span class="line">  -p <span class="number">9999</span>:<span class="number">27017</span> \</span><br><span class="line">  -v /Users/baeldung/mongo/data/db:/data/db \</span><br><span class="line">  mongo:<span class="number">3.6</span> --bind_ip_all</span><br></pre></td></tr></table></figure><p>我们能以变成的方式启动同样的容器，并对其进行配置：</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CreateContainerResponse container</span><br><span class="line">  = dockerClient.createContainerCmd(<span class="string">&quot;mongo:3.6&quot;</span>)</span><br><span class="line">    .withCmd(<span class="string">&quot;--bind_ip_all&quot;</span>)</span><br><span class="line">    .withName(<span class="string">&quot;mongo&quot;</span>)</span><br><span class="line">    .withHostName(<span class="string">&quot;baeldung&quot;</span>)</span><br><span class="line">    .withEnv(<span class="string">&quot;MONGO_LATEST_VERSION=3.6&quot;</span>)</span><br><span class="line">    .withPortBindings(PortBinding.parse(<span class="string">&quot;9999:27017&quot;</span>))</span><br><span class="line">    .withBinds(Bind.parse(<span class="string">&quot;/Users/baeldung/mongo/data/db:/data/db&quot;</span>)).exec();</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-3-start、stop和kill-container"><a href="#4-3-start、stop和kill-container" class="headerlink" title="4.3 start、stop和kill container"></a>4.3 start、stop和kill container</h3><p>一旦我们创建了容器，我们就能通过容器名字name或者容器id，启动start、停止stop和杀死kill这个容器：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.startContainerCmd(container.getId()).exec();</span><br><span class="line"></span><br><span class="line">dockerClient.stopContainerCmd(container.getId()).exec();</span><br><span class="line"></span><br><span class="line">dockerClient.killContainerCmd(container.getId()).exec();</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-4-查看inspect-容器"><a href="#4-4-查看inspect-容器" class="headerlink" title="4.4 查看inspect 容器"></a>4.4 查看inspect 容器</h3><p><em>inspectContainerCmd</em> 方法有一个String类型的参数，这个参数指明容器的name或者id。使用这个方法，我们能直接地观察容器的元数据metadate：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InspectContainerResponse container </span><br><span class="line">  &#x3D; dockerClient.inspectContainerCmd(container.getId()).exec();</span><br></pre></td></tr></table></figure><p>4.5 Snapshot 快照 容器</p><p>类似与<em>docker commit</em> 命令，我们能使用<em>commitCmd</em>方法创建一个新的镜像。</p><p>在我们的例子中，这个场景是，我们先前运行一个 <strong>alpine:3.6</strong>容器，它的id是“*<strong>3464bb547f88*</strong>”，并且在它的顶部安装了git。</p><p>现在，我们想从这个容器中创建一个新的镜像快照：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String snapshotId &#x3D; dockerClient.commitCmd(&quot;3464bb547f88&quot;)</span><br><span class="line">  .withAuthor(&quot;Baeldung &lt;info@baeldung.com&gt;&quot;)</span><br><span class="line">  .withEnv(&quot;SNAPSHOT_YEAR&#x3D;2018&quot;)</span><br><span class="line">  .withMessage(&quot;add git support&quot;)</span><br><span class="line">  .withCmd(&quot;git&quot;, &quot;version&quot;)</span><br><span class="line">  .withRepository(&quot;alpine&quot;)</span><br><span class="line">  .withTag(&quot;3.6.git&quot;).exec();</span><br></pre></td></tr></table></figure><p>由于与git捆绑的新镜像仍保留在主机上，我们能在Docker主机上搜索到它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls alpine --format &quot;table &#123;&#123;.Repository&#125;&#125; &#123;&#123;.Tag&#125;&#125;&quot;</span><br><span class="line">REPOSITORY TAG</span><br><span class="line">alpine     3.6.git</span><br></pre></td></tr></table></figure><h2 id="5-镜像管理"><a href="#5-镜像管理" class="headerlink" title="5.镜像管理"></a>5.镜像管理</h2><p>我们提供了一些适用的命令来管理镜像操作。</p><h3 id="5-1列出镜像"><a href="#5-1列出镜像" class="headerlink" title="5.1列出镜像"></a>5.1列出镜像</h3><p>列出Docker主机上的所有镜像（包括悬挂镜像），我们需要应用的是<em>listImagesCmd</em>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Image&gt; images &#x3D; dockerClient.listImagesCmd().exec();</span><br></pre></td></tr></table></figure><p>如果在Docker主机上我们有两个镜像，我们应该在运行时获得它们的*<strong>Image*</strong>对象。我们要寻找的镜像是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format &quot;table &#123;&#123;.Repository&#125;&#125; &#123;&#123;.Tag&#125;&#125;&quot;</span><br><span class="line">REPOSITORY TAG</span><br><span class="line">alpine     3.6</span><br><span class="line">mongo      3.6</span><br></pre></td></tr></table></figure><p>接下来，要看中间镜像，我们需要明确地请求它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Image&gt; images &#x3D; dockerClient.listImagesCmd()</span><br><span class="line">  .withShowAll(true).exec();</span><br></pre></td></tr></table></figure><p>如果在这个情况下，只显示悬挂镜像，必须考虑<em>withDanglingFilter</em>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Image&gt; images &#x3D; dockerClient.listImagesCmd()</span><br><span class="line">  .withDanglingFilter(true).exec();</span><br></pre></td></tr></table></figure><h3 id="5-2构建镜像"><a href="#5-2构建镜像" class="headerlink" title="5.2构建镜像"></a>5.2构建镜像</h3><p>我们专注于使用API方式构建镜像。用<strong>buildImageCmd</strong>方法从Dockerfile中构建镜像。在我们的项目中，我们已经有了一个Dockerfile文件，这个Dockerfile定义了一个 安装了git的Alpine镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.6</span><br><span class="line"></span><br><span class="line">RUN apk --update add git openssh &amp;&amp; \</span><br><span class="line">  rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* &amp;&amp; \</span><br><span class="line">  rm &#x2F;var&#x2F;cache&#x2F;apk&#x2F;*</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;git&quot;]</span><br><span class="line">CMD [&quot;--help&quot;]</span><br></pre></td></tr></table></figure><p>在构建进程开始之前，新镜像无需使用缓存就能被创建，在任何情况下，docker 引擎将尝试拉取较新版本的<em>alpine:3.6</em>。如果一切顺利，最终我们应该看到具有给定名称的<strong>alpine:git</strong>镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String imageId &#x3D; dockerClient.buildImageCmd()</span><br><span class="line">  .withDockerfile(new File(&quot;path&#x2F;to&#x2F;Dockerfile&quot;))</span><br><span class="line">  .withPull(true)</span><br><span class="line">  .withNoCache(true)</span><br><span class="line">  .withTag(&quot;alpine:git&quot;)</span><br><span class="line">  .exec(new BuildImageResultCallback())</span><br><span class="line">  .awaitImageId();</span><br></pre></td></tr></table></figure><h3 id="5-3查看镜像"><a href="#5-3查看镜像" class="headerlink" title="5.3查看镜像"></a>5.3查看镜像</h3><p>使用<em>inspectImageCmd</em>方法，我们可以查看镜像的底层信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InspectImageResponse image </span><br><span class="line">  = dockerClient.inspectImageCmd(<span class="string">&quot;161714540c41&quot;</span>).exec();</span><br></pre></td></tr></table></figure><h3 id="5-4给图像版本号"><a href="#5-4给图像版本号" class="headerlink" title="5.4给图像版本号"></a>5.4给图像版本号</h3><p>使用<em>docker</em> <em>tag</em> 命令给我们的镜像添加版本号是非常简单的，这个API也不例外。我们可以使用<em>tagImageCmd</em> 命令来完成同样的目的。使用git将镜像id为*<strong>161714540c41*</strong>的镜像标记到<strong>baeldung/alpine</strong>库中，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String imageId &#x3D; &quot;161714540c41&quot;;</span><br><span class="line">String repository &#x3D; &quot;baeldung&#x2F;alpine&quot;;</span><br><span class="line">String tag &#x3D; &quot;git&quot;;</span><br><span class="line"></span><br><span class="line">dockerClient.tagImageCmd(imageId, repository, tag).exec();</span><br></pre></td></tr></table></figure><p>我们可以列出最新创建的镜像，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">&quot;table &#123;&#123;.Repository&#125;&#125; &#123;&#123;.Tag&#125;&#125;&quot;</span></span><br><span class="line">REPOSITORY      TAG</span><br><span class="line">baeldung/alpine git</span><br></pre></td></tr></table></figure><h3 id="5-5推送镜像"><a href="#5-5推送镜像" class="headerlink" title="5.5推送镜像"></a>5.5推送镜像</h3><p>在推送镜像到注册服务之前，docker client必须配置，以便与这个服务协作，因为与注册服务工作需要提前获取授权。</p><p>因为假定我们的客户端配置了Docker Hub，所以我们可以将<em>baeldung/alpine</em>镜像推送到baeldung DockerHub账户上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.pushImageCmd(&quot;baeldung&#x2F;alpine&quot;)</span><br><span class="line">  .withTag(&quot;git&quot;)</span><br><span class="line">  .exec(new PushImageResultCallback())</span><br><span class="line">  .awaitCompletion(90, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>我们必须容忍持续的进程。在这个例子中，我们等待了90秒。</p><h3 id="5-6拉取镜像"><a href="#5-6拉取镜像" class="headerlink" title="5.6拉取镜像"></a>5.6拉取镜像</h3><p>从注册服务中拉取镜像，我们利用<em>pullImageCmd</em>方法。另外，如果镜像是从私有库中拉取，客户端必须知道我们的证书，否则这个过程就会停止并报错。等同于拉取镜像，我们指定一个回调和一个固定的周期拉取镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.pullImageCmd(&quot;baeldung&#x2F;alpine&quot;)</span><br><span class="line">  .withTag(&quot;git&quot;)</span><br><span class="line">  .exec(new PullImageResultCallback())</span><br><span class="line">  .awaitCompletion(30, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>拉取完成后，检查Docker主机中是否存在我们提及的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images baeldung&#x2F;alpine --format &quot;table &#123;&#123;.Repository&#125;&#125; &#123;&#123;.Tag&#125;&#125;&quot;</span><br><span class="line">REPOSITORY      TAG</span><br><span class="line">baeldung&#x2F;alpine git</span><br></pre></td></tr></table></figure><h3 id="5-7删除镜像"><a href="#5-7删除镜像" class="headerlink" title="5.7删除镜像"></a>5.7删除镜像</h3><p>剩下的函数中的另一个简单的函数是<em>removeImageCmd</em>方法。我们可以使用它的短或长ID删除镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.removeImageCmd(&quot;beaccc8687ae&quot;).exec();</span><br></pre></td></tr></table></figure><h3 id="5-8在注册中搜索"><a href="#5-8在注册中搜索" class="headerlink" title="5.8在注册中搜索"></a>5.8在注册中搜索</h3><p>从Docer Hub上搜索镜像，客户端附带一个<em>searchImagesCmd</em>方法，这个方法要指定一个字符串类型的值，这个值指示了要搜索的词。在这，我们探索Docker Hub中包含‘java’的镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SearchItem&gt; items &#x3D; dockerClient.searchImagesCmd(&quot;Java&quot;).exec();</span><br></pre></td></tr></table></figure><p>输出返回的<em>SearchItem</em>对象中列出了前25过热相关的镜像。</p><h2 id="6-卷管理"><a href="#6-卷管理" class="headerlink" title="6.卷管理"></a>6.卷管理</h2><p>如果java项目需要使用卷与Docker进行交互，我们也应该重视这一章节。简短地，我们查看由Docker Java API提供的卷的基本技术。</p><h3 id="6-1列出卷"><a href="#6-1列出卷" class="headerlink" title="6.1列出卷"></a>6.1列出卷</h3><p>包括有名的和无名的所有可用的卷都被列出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ListVolumesResponse volumesResponse &#x3D; dockerClient.listVolumesCmd().exec();</span><br><span class="line">List&lt;InspectVolumeResponse&gt; volumes &#x3D; volumesResponse.getVolumes();</span><br></pre></td></tr></table></figure><h3 id="6-2查看卷"><a href="#6-2查看卷" class="headerlink" title="6.2查看卷"></a>6.2查看卷</h3><p><em>inspectVolumeCmd</em>方法是显示一个卷详细信息的窗体。我们通过指定卷id查看卷：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InspectVolumeResponse volume </span><br><span class="line">  &#x3D; dockerClient.inspectVolumeCmd(&quot;0220b87330af5&quot;).exec();</span><br></pre></td></tr></table></figure><h3 id="6-3创建卷"><a href="#6-3创建卷" class="headerlink" title="6.3创建卷"></a>6.3创建卷</h3><p>这个API提供了两个不同的选项进行创建卷。无参数的<em>createVolumeCmd</em>方法创建一个卷，这个卷的名字由Docker生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateVolumeResponse unnamedVolume &#x3D; dockerClient.createVolumeCmd().exec();</span><br></pre></td></tr></table></figure><p>要不使用默认的行为，这个<em>withName</em>的方法允许我们给卷命名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CreateVolumeResponse namedVolume </span><br><span class="line">  = dockerClient.createVolumeCmd().withName(<span class="string">&quot;myNamedVolume&quot;</span>).exec();</span><br></pre></td></tr></table></figure><h3 id="6-4删除卷"><a href="#6-4删除卷" class="headerlink" title="6.4删除卷"></a>6.4删除卷</h3><p>我们可以使用<em>removeVolumeCmd</em>方法从Docker主机中直观地删除一个卷。要注意的是，如果一个卷正在被容器使用，我们不能删除这个卷，这点很重要。我们从卷列表中删除卷，<em>myNamedVolume</em>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.removeVolumeCmd(&quot;myNamedVolume&quot;).exec();</span><br></pre></td></tr></table></figure><h2 id="7-网络管理"><a href="#7-网络管理" class="headerlink" title="7.网络管理"></a>7.网络管理</h2><p>我们最后一节是关于用API管理网络任务。</p><h3 id="7-1列出网络"><a href="#7-1列出网络" class="headerlink" title="7.1列出网络"></a>7.1列出网络</h3><p>我们可以使用一种传统的API方法，列出网络单元的列表，从列表开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Network&gt; networks &#x3D; dockerClient.listNetworksCmd().exec();</span><br></pre></td></tr></table></figure><h3 id="7-2创建网络"><a href="#7-2创建网络" class="headerlink" title="7.2创建网络"></a>7.2创建网络</h3><p>执行<em>createNetworkCmd</em>命令就等价于<em>docker network create</em> c命令。如果我们有三部分或者一个客户网络驱动，<em>withDriver</em>方法能接受这些除了嵌入驱动。在我们的例子中，让我们创建一个桥接网络，它的名字是<em>baeldung</em>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CreateNetworkResponse networkResponse </span><br><span class="line">  = dockerClient.createNetworkCmd()</span><br><span class="line">    .withName(<span class="string">&quot;baeldung&quot;</span>)</span><br><span class="line">    .withDriver(<span class="string">&quot;bridge&quot;</span>).exec();</span><br></pre></td></tr></table></figure><p>更进一步，使用默认设置创建一个网络单元不能解决问题，我们可以应用其他辅助方法来构建高级网络。因此，用自定义值覆盖默认子网络：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CreateNetworkResponse networkResponse &#x3D; dockerClient.createNetworkCmd()</span><br><span class="line">  .withName(&quot;baeldung&quot;)</span><br><span class="line">  .withIpam(new Ipam()</span><br><span class="line">    .withConfig(new Config()</span><br><span class="line">    .withSubnet(&quot;172.36.0.0&#x2F;16&quot;)</span><br><span class="line">    .withIpRange(&quot;172.36.5.0&#x2F;24&quot;)))</span><br><span class="line">  .withDriver(&quot;bridge&quot;).exec();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以使用docker命令运行的相同命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create \</span><br><span class="line">  --subnet&#x3D;172.36.0.0&#x2F;16 \</span><br><span class="line">  --ip-range&#x3D;172.36.5.0&#x2F;24 \</span><br><span class="line">  baeldung</span><br></pre></td></tr></table></figure><h3 id="7-3查看网络"><a href="#7-3查看网络" class="headerlink" title="7.3查看网络"></a>7.3查看网络</h3><p>展示网络的底层详细信息也包含在API中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Network network </span><br><span class="line">  &#x3D; dockerClient.inspectNetworkCmd().withNetworkId(&quot;baeldung&quot;).exec();</span><br></pre></td></tr></table></figure><h3 id="7-4删除网络"><a href="#7-4删除网络" class="headerlink" title="7.4删除网络"></a>7.4删除网络</h3><p>我们能使用<em>removeNetworkCmd</em>方法根据网络名称和id安全地删除网络单元：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.removeNetworkCmd(<span class="string">&quot;baeldung&quot;</span>).exec();</span><br></pre></td></tr></table></figure><h2 id="8总结"><a href="#8总结" class="headerlink" title="8总结"></a>8总结</h2><p>在这个广泛的教程中，我们探索<em>Java Docker API Client</em>中各种各样的功能，以及用于部署和管理场景的部署方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料：&lt;a href=&quot;https://www.baeldung.com/docker-java-api&quot;&gt;https://www.baeldung.com/docker-java-api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; cl</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>将镜像发布到DockerHub</title>
    <link href="http://example.com/2021/01/10/%E5%B0%86Docker%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0DockerHub/"/>
    <id>http://example.com/2021/01/10/%E5%B0%86Docker%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0DockerHub/</id>
    <published>2021-01-09T16:00:00.000Z</published>
    <updated>2021-01-11T09:11:59.345Z</updated>
    
    <content type="html"><![CDATA[<p>步骤1：在DockerHub上注册帐号。</p><p>步骤2：本地登录DockerHub帐号</p><blockquote><p>docker login</p></blockquote><p>步骤3：使用<code>docker tag</code>命令将镜像重新命令并设置版本号</p><p>docker tag命令使用方式：</p><blockquote><p>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</p></blockquote><p>如果要发布镜像到DockerHub，则TARGET_IMAGE的格式为 <font color="red">namespace/imagename</font>。</p><p>namespace就是DockerHub的用户名</p><p>步骤4：使用命令提交镜像</p><blockquote><p>docker push TARGET_IMAGE[:TAG]</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;步骤1：在DockerHub上注册帐号。&lt;/p&gt;
&lt;p&gt;步骤2：本地登录DockerHub帐号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker login&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;步骤3：使用&lt;code&gt;docker tag&lt;/code&gt;命令将镜像重</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile构建镜像</title>
    <link href="http://example.com/2021/01/09/%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
    <id>http://example.com/2021/01/09/%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</id>
    <published>2021-01-08T16:00:00.000Z</published>
    <updated>2021-01-10T14:10:09.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Dockerfile构建镜像"><a href="#使用Dockerfile构建镜像" class="headerlink" title="使用Dockerfile构建镜像"></a>使用Dockerfile构建镜像</h2><p>常用的Dockerfile指令：</p><blockquote><p>FORM             # 基础环境镜像，一切从这里构建</p><p>MAINTAINER # 镜像是谁写的，姓名+邮箱</p><p>RUN                # 镜像构建时需要运行的命令</p><p>ADD                # COPY文件，会自动解压</p><p>WORKDIR       # 镜像的工作目录</p><p>VOLUME         # 挂载的目录</p><p>EXPOSE           # 暴露端口配置</p><p>CMD                # 指定这个端口启动时要运行的命令，只有最后一个会生效，可被替代</p><p>ENTRYPOINT  # 指定这个端口启动时要运行的命令，可以追加命令</p><p>ONBUILD        # 当构建一个被继承Dockerfile，这个时候就会运行 ONBUILD指令，触发指令</p><p>COPY               # 类似ADD，将我们的文件拷贝到镜像中</p><p>ENV                  # 构建时候设置环境变量 </p></blockquote><h2 id="测试1：构建一个属于自己的centos"><a href="#测试1：构建一个属于自己的centos" class="headerlink" title="测试1：构建一个属于自己的centos"></a>测试1：构建一个属于自己的centos</h2><p>官方提供的centos镜像功能比较少，有些命令没有，比如：vim、ifconfig命令。</p><p>下面新建一个自定义Dockerfile文件，根据该文件构建一个包含vim、ifconfig命令的centos镜像。</p><p><strong>步骤1：编写<font color='red'>Dockerfile文件</font>（文件名为mydockerfile-centos）：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> lize&lt;<span class="number">1729498179</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p><strong>步骤2：使用<font color='red'>docker build命令</font>构建自定义镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -f mydockerfile-centos -t mycentos:0.1 .</span></span><br></pre></td></tr></table></figure><p><strong>步骤3：使用自定义镜像<font color='red'>新建一个容器并运行</font></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it mycentos:0.1</span></span><br><span class="line">[root@c4898d11d6f0 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.5  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:05  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 23  bytes 3506 (3.4 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@c4898d11d6f0 local]# vim test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到在这个容器中可以使用vim和ifconfig命令了。</p><h2 id="拓展：查看镜像构建信息"><a href="#拓展：查看镜像构建信息" class="headerlink" title="拓展：查看镜像构建信息"></a>拓展：查看镜像构建信息</h2><p>使用方法：</p><blockquote><p><font color='red'>docker history [镜像ID]</font></p></blockquote><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>示例</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker history 6366488f8808</span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">6366488f8808   15 minutes ago   &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;sh&quot; &quot;-c&quot; &quot;&#x2F;bin…   0B        </span><br><span class="line">af1077aebb21   15 minutes ago   &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;sh&quot; &quot;-c&quot; &quot;echo…   0B        </span><br><span class="line">bfbd94640b13   15 minutes ago   &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;sh&quot; &quot;-c&quot; &quot;echo…   0B        </span><br><span class="line">40c2064da313   15 minutes ago   &#x2F;bin&#x2F;sh -c #(nop)  EXPOSE 80                    0B        </span><br><span class="line">902c67b4a156   15 minutes ago   &#x2F;bin&#x2F;sh -c yum -y install net-tools             23.4MB    </span><br><span class="line">db8d734a53a3   15 minutes ago   &#x2F;bin&#x2F;sh -c yum -y install vim                   58.1MB    </span><br><span class="line">2f1b2c15ebcf   23 minutes ago   &#x2F;bin&#x2F;sh -c #(nop) WORKDIR &#x2F;usr&#x2F;local            0B        </span><br><span class="line">71fd07af8e5c   23 minutes ago   &#x2F;bin&#x2F;sh -c #(nop)  ENV MYPATH&#x3D;&#x2F;usr&#x2F;local        0B        </span><br><span class="line">1e96df00e9c4   23 minutes ago   &#x2F;bin&#x2F;sh -c #(nop)  MAINTAINER lize&lt;172949817…   0B        </span><br><span class="line">300e315adb2f   4 weeks ago      &#x2F;bin&#x2F;sh -c #(nop)  CMD [&quot;&#x2F;bin&#x2F;bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      4 weeks ago      &#x2F;bin&#x2F;sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      4 weeks ago      &#x2F;bin&#x2F;sh -c #(nop) ADD file:bd7a2aed6ede423b7…   209MB</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="测试2：Dockerfile中的CMD命令"><a href="#测试2：Dockerfile中的CMD命令" class="headerlink" title="测试2：Dockerfile中的CMD命令"></a>测试2：Dockerfile中的CMD命令</h2><p><strong>步骤1：Dockerfile: docker-cmd-test</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>启动容器后并执行<code>ls -a</code>命令。</p><p><strong>步骤2：构建镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -f dockerfile-cmd-test -t cmdtest .</span></span><br></pre></td></tr></table></figure><p><strong>步骤3：运行容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ba526c95ec4e</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><p>可以看到运行容器时，执行了Dockerfile中的<font color='red'>CMD命令是<code>ls -a</code></font>。</p><p>如果在运行容器时，后面<font color='red'>追加一个选项参数，比如<code>-l</code></font>，那么这个命令将会替换掉Dockerfile中的CMD命令，所以<font color='red'>实际执行的命令为<code>ls -l</code></font></p><p>但是又因为<code>-al</code>是一个命令，而<code>-l</code>不是一个完整的命令，所以这样做会报错，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run ba526c95ec4e -l</span>                      </span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试3：Dockerfile中的ENTRYPOINT命令"><a href="#测试3：Dockerfile中的ENTRYPOINT命令" class="headerlink" title="测试3：Dockerfile中的ENTRYPOINT命令"></a>测试3：Dockerfile中的ENTRYPOINT命令</h2><p><strong>步骤1：ENTRYPOINT命令和CMD命令基本一样，构建Dockerfile如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br></pre></td></tr></table></figure><p>启动容器后并执行<code>ls -a</code>命令。</p><p><strong>步骤2：构建镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -f dockerfile-entrypoint-test -t entrypoint-test .</span></span><br></pre></td></tr></table></figure><p><strong>步骤3：运行容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run 40f8e8c455cf</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><p>运行容器后和ENTRYPOINT命令一样同样执行了<code>ls -a</code>命令。</p><p>如果运行容器时<font color='red'>追加了<code>-l</code>命令</font>，则<code>-l</code>命令会追加到ENTRYPOINT命令后面，<font color='red'>实际执行的是<code>ls -al</code>命令</font>，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run 40f8e8c455cf -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan  9 13:43 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan  9 13:43 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Jan  9 13:43 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 Jan  9 13:43 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan  9 13:43 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3 15:22 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Dec  4 17:37 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 opt</span><br><span class="line">dr-xr-xr-x 292 root root    0 Jan  9 13:43 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Dec  4 17:37 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Dec  4 17:37 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3 15:22 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Jan  9 13:43 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Dec  4 17:37 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Dec  4 17:37 var</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>CMD命令和ENTRYPOINT命令的区别：</p><p>相同之处：都是启动容器后执行命令。</p><p>不同之处：如果运行容器时追加命令，那这条追加命令会<font color='red'>替换掉CMD命令</font>，而这条追加命令会<font color='red'>追加到ENTRYPOINT命令的后面</font>。</p><h2 id="实战1：构建自定义tomcat镜像"><a href="#实战1：构建自定义tomcat镜像" class="headerlink" title="实战1：构建自定义tomcat镜像"></a>实战1：构建自定义tomcat镜像</h2><p>步骤1：构建Dockerfile文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER lize&lt;1729498179@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u201-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.41.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_201</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.41</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.41</span><br><span class="line"></span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.41/bin/startup.sh $$ tail -F /usr/local/apache-tomcat-9.0.41/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p>步骤2：创建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t mytomcat .</span></span><br></pre></td></tr></table></figure><p>Dockerfile文件以命名为Dockerfile，那么在该目录创建镜像时无需使用-f指定Dockerfile文件所在位置。</p><p>步骤3：运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 9090:8080 --name mytomcat-test -v /home/&#123;username&#125;/<span class="built_in">test</span>/docker-test/docker-tomcat-test/volume/logs:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.41/logs -v /home/&#123;username&#125;/<span class="built_in">test</span>/docker-test/docker-tomcat-test/volume/webapps:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.41/webapps mytomcat</span></span><br></pre></td></tr></table></figure><p>步骤4：添加项目</p><p>$ cat ./volume/webapps/test/WEB-INF/web.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xmlns:web</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>$ cat ./volume/webapps/test/index.jsp </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;docker tomcat test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello world&lt;/h2&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   System.out.println(<span class="string">&quot;----successful---&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>步骤5：测试访问</p><p>在主机输入localhost:9090/test出现Hello World成功，查看catalina.out文件，出现打印记录即成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用Dockerfile构建镜像&quot;&gt;&lt;a href=&quot;#使用Dockerfile构建镜像&quot; class=&quot;headerlink&quot; title=&quot;使用Dockerfile构建镜像&quot;&gt;&lt;/a&gt;使用Dockerfile构建镜像&lt;/h2&gt;&lt;p&gt;常用的Dockerfile指</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器之间同步数据</title>
    <link href="http://example.com/2021/01/09/Docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2021/01/09/Docker%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/</id>
    <published>2021-01-08T16:00:00.000Z</published>
    <updated>2021-01-09T04:05:03.351Z</updated>
    
    <content type="html"><![CDATA[<p>首先启动一个名为docker01的容器。</p><p>然后运行下面这个命令，新建一个名为docker02的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name docker02 --volumes-from docker01 lize/centos:1.0</span></span><br></pre></td></tr></table></figure><blockquote><p>–volumes-from 就表示将docker01容器的数据卷同步到新建的这个容器中。</p></blockquote><p>若在docker01容器内对数据卷中的内容进行修改，那么这些修改就会同步到docker02容器的数据卷内。</p><p>反过来，若在docker02容器内对数据卷中的内容进行修改，那么这些修改也会同步到docker01容器的数据卷内。</p><p>即使将docker01容器彻底删除，docker02容器内的数据卷也会依旧存在。</p><p>这个数据卷的同步机制是通过双向拷贝数据实现的，所以即使删除“父容器”后，“子容器”内的数据卷不会受影响。</p><p>等到同步数据卷的容器全部停止后，这个同步的数据卷则被删除（本地持久化后的数据不会被删除）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先启动一个名为docker01的容器。&lt;/p&gt;
&lt;p&gt;然后运行下面这个命令，新建一个名为docker02的容器。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker匿名挂载和具名挂载</title>
    <link href="http://example.com/2021/01/08/Docker%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD%E5%92%8C%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD/"/>
    <id>http://example.com/2021/01/08/Docker%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD%E5%92%8C%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-08T14:20:32.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>-v 容器内路径                         #匿名挂载</p><p>-v 卷名:容器内路径                #具名挂载</p><p>-v /宿主机路径:容器内路径    #指定路径挂载</p></blockquote><p>使用数据卷挂载时通常要指定主机目录和容器内目录。</p><p>而匿名挂载是不指定主机目录，让Docker在主机生成一个目录用来完成主机目录和容器目录之间的挂载。</p><h4 id="匿名挂载示例："><a href="#匿名挂载示例：" class="headerlink" title="匿名挂载示例："></a>匿名挂载示例：</h4><p>-v 后面<font color='red'>只用写容器内的目录</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx01 -v /etc/nginx nginx</span></span><br></pre></td></tr></table></figure><h4 id="查看已挂载的卷："><a href="#查看已挂载的卷：" class="headerlink" title="查看已挂载的卷："></a>查看已挂载的卷：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     b3b5c49a7b70d051d7e6016315802e0e76e2fcf51c6f063154e6003ea4bacc64</span><br><span class="line">local     c2e4e840333c3822a97c72237aa193a5c86117814d3d650b784a4ebde775dafc</span><br><span class="line">local     cout-test-vol</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="具名挂载示例："><a href="#具名挂载示例：" class="headerlink" title="具名挂载示例："></a>具名挂载示例：</h4><p>-v后面的格式是<font color='red'>主机卷名称:容器内目录 </font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx02 -v test-nginx:/etc/nginx nginx</span></span><br></pre></td></tr></table></figure><h4 id="再次查看已挂载的卷："><a href="#再次查看已挂载的卷：" class="headerlink" title="再次查看已挂载的卷："></a>再次查看已挂载的卷：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume ls</span> </span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     b3b5c49a7b70d051d7e6016315802e0e76e2fcf51c6f063154e6003ea4bacc64</span><br><span class="line">local     c2e4e840333c3822a97c72237aa193a5c86117814d3d650b784a4ebde775dafc</span><br><span class="line">local     cout-test-vol</span><br><span class="line">local     test-nginx</span><br></pre></td></tr></table></figure><p>多出一个名为<code>test-nginx </code>的卷。</p><p>查看这个卷的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume inspect test-nginx</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2021-01-08T22:01:26+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/test-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;test-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可见，Docker将主机上生成了<code>/var/lib/docker/volumes/test-nginx/_data</code>目录，并将该目录与容器内指定目录进行了双向绑定。</p><h2 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径: ro rw 改变读写权限</span></span><br><span class="line">ro read only# 只读</span><br><span class="line">rw read write# 可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦设置了容器权限，容器对我们挂在出来的内容就有限定了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx02 -v test-nginx:/etc/nginx:ro nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx02 -v test-nginx:/etc/nginx:rw nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，而容器内部无法操作</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;-v 容器内路径                         #匿名挂载&lt;/p&gt;
&lt;p&gt;-v 卷名:容</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用dockerfile创建Docker镜像</title>
    <link href="http://example.com/2021/01/08/%E4%BD%BF%E7%94%A8dockerfile%E5%88%9B%E5%BB%BADocker%E9%95%9C%E5%83%8F/"/>
    <id>http://example.com/2021/01/08/%E4%BD%BF%E7%94%A8dockerfile%E5%88%9B%E5%BB%BADocker%E9%95%9C%E5%83%8F/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-09T02:29:15.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h2><p>Dockerfile是用来构建docker镜像的文件，类似一个命令脚本。</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个命令，每个命令就是一层。</p><p>首先创建Dockerfile文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;------end------&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>运行<code>docker build</code>命令和Dockerfile构建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -f dockerfile1 -t lize/centos:1.0 .</span></span><br></pre></td></tr></table></figure><blockquote><p>-f 要指定Dockerfile的位置</p><p>-t 设置镜像名称:版本号</p><p>最后一个.表示在当前目录</p></blockquote><p>根据自己创建的镜像新建容器并运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it 36ac6c176d0a /bin/bash</span></span><br></pre></td></tr></table></figure><p>查看容器内目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@e75adb7db14d /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  360 Jan  8 14:58 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan  8 14:58 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3 15:22 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3 15:22 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Dec  4 17:37 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 opt</span><br><span class="line">dr-xr-xr-x 269 root root    0 Jan  8 14:58 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Dec  4 17:37 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Dec  4 17:37 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3 15:22 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3 15:22 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Jan  8 14:58 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Dec  4 17:37 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Dec  4 17:37 var</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jan  8 14:58 volume01</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jan  8 14:58 volume02</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现Dockerfile中设置的挂载卷目录volume01和volume02。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初识Dockerfile&quot;&gt;&lt;a href=&quot;#初识Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;初识Dockerfile&quot;&gt;&lt;/a&gt;初识Dockerfile&lt;/h2&gt;&lt;p&gt;Dockerfile是用来构建docker镜像的文件，类似一</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>PPA</title>
    <link href="http://example.com/2021/01/07/PPA/"/>
    <id>http://example.com/2021/01/07/PPA/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2021-01-08T07:26:48.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PPA-Persional-Package-Archive"><a href="#PPA-Persional-Package-Archive" class="headerlink" title="PPA(Persional Package Archive)"></a>PPA(Persional Package Archive)</h2><p>参考资料：<a href="https://itsfoss.com/ppa-guide/">https://itsfoss.com/ppa-guide/</a></p><p>私人包存档，这暗示对一个开发人员独有的东西，是非官方支持的发布。</p><p>Ubuntu提供了一个叫做Launchpad的平台使软件开发人员能够创建属于他们自己的仓库。你可以将<code>PPA repository</code>加入到你的<code>sources.list</code>里面当你更新你的系统时，你的系统将知道新软件的可用性，并且你可以使用标准的<code>sudo apt install</code>命令安装这个软件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将the PPA repository添加到list中</span></span><br><span class="line">sudo add-apt-repository ppa:dr-akulavich/lighttable</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新the list of the packages that can be installed on the system</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装the package</span></span><br><span class="line">sudo apt-get install lighttable-installer</span><br></pre></td></tr></table></figure><blockquote><p>sudo add-apt-repository ppa:dr-akulavich/lighttable</p></blockquote><p>这个命令中没有URL，是因为the tool被设计使用抽象信息表达URL。</p><p>如果你添加<code>ppa:dr-akulavich/lighttable</code>，那么你就会获得Light Table，但是如果你添加<code>ppa:dr-akulavich</code>，那么你就会获得一个更高级库里面所有的库和软件包，它是分层的。</p><p>基本上，当你使用<code>add-apt-repository</code>命令添加<code>PPA</code>时所做的操作就如同运行下面这些命令：</p><blockquote><p>deb <a href="http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu">http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu</a> YOUR_UBUNTU_VERSION_HERE main<br>deb-src <a href="http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu">http://ppa.launchpad.net/dr-akulavich/lighttable/ubuntu</a> YOUR_UBUNTU_VERSION_HERE main</p></blockquote><p>上面这两行是添加任何仓库（repositories）到你的<code>sources.list</code>的传统方式。</p><p>但是PPA对你来说是自动的，无需担心精准的<code>repository URL</code>地址和操作系统版本。</p><p>一个要提及的重要的事就是当你使用PPA的时候，他不会改变你的原来的<code>sources.list</code>文件，而它会在<code>/etc/apt/sources.d</code>目录中创建两个文件，一个list文件和一个备份文件（后缀为save）。</p><p>以list为后缀的文件包含添加关于库的信息的命令。</p><p>这是一个确保添加PPA不会弄乱原来的<code>sources.list</code>文件的安全的措施，也可以帮助删除PPA。</p><h2 id="为什么是PPA？为什么不是DEB包？"><a href="#为什么是PPA？为什么不是DEB包？" class="headerlink" title="为什么是PPA？为什么不是DEB包？"></a>为什么是PPA？为什么不是DEB包？</h2><p>你也许会问为什么你应该使用PPA，当涉及到使用不是每个人偏爱的命令行的时候。为什么不直接发布能详细安装的DEB包？</p><p>答案在于更新过程。如果你使用DEB包安装软件，则不能保证安装的软件在你运行<code>sudo apt update &amp;&amp; sudo apt upgrade</code>命令时能被更新。</p><p>因为apt upgrade过程依赖<code>sources.list</code>，如果没有软件条目，那么他就无法通过标准软件更新获得更新。</p><p>所以，这就意味着使用DEB包安装的软件将永远不会获得更新？不是，这要看这个包是如何被创建的。</p><p>一些开发者自动添加一个条目到<code>sources.list</code>，然后这个软件就像常规软件那样更新。Google Chrome就是这样一个例子。</p><p>当你试图运行一些软件时，它会通知你新版本的可用性。你将不得不下载一个新的DEB包，然后再次运行以更新当前软件到一个新的版本。Oracle Virtual Box就是这样一个例子。</p><p>对于剩下的DEB包，你将不得不手动寻找一个更新，并且这样并不方便，特别是如果你的软件是为了beta测试者。你需要频繁地添加更多的更新。这就是PPA抢救的地方。</p><h2 id="官方的PPA-vs-非官方的PPA"><a href="#官方的PPA-vs-非官方的PPA" class="headerlink" title="官方的PPA vs 非官方的PPA"></a>官方的PPA vs 非官方的PPA</h2><p>你可能听说过官方的PPA和非官方的PPA。两者有什么不同？</p><p>当开发者为他们的软件创建一个PPA时，这个PPA就被称作官方的PPA。很明显，它来自于项目开发人员。</p><p>但是有时候，个人创建一个项目的PPA，但这个项目由其他人创建。</p><p>为什么有些人这样做？因为有些开发人员仅仅提供软件的源代码，并且你知道<a href="https://itsfoss.com/install-software-from-source-code/">installing software from source code in Linux</a> 是痛苦的，不是所有人可以或者愿意这样做。</p><p>这就是为什么志愿者自己根据这些源代码创建PPA，以便其他使用者能容易地安装软件，毕竟，使用那3行命令要比源代码安装容易的多。</p><h2 id="确保PPA对你的发行版本是可用的"><a href="#确保PPA对你的发行版本是可用的" class="headerlink" title="确保PPA对你的发行版本是可用的"></a>确保PPA对你的发行版本是可用的</h2><p>当在Ubuntu或其他基于Debian的发行版来说，有一点事情要牢记。</p><p>不是所有的PPA对你的特定的发行版是可用的。你应该知道<a>哪一个Ubuntu版本</a>是你正在使用的。发行的codename是重要的，因为当你转到某个PPA网页时，你能看到那一个Ubuntu版本是PPA所支持的。</p><p>对于其他基于Ubuntu的发行版，你可以检查这目录<code>/etc/os-release</code>，找到Ubuntu 的版本信息。</p><p><a href="https://itsfoss.com/how-to-know-ubuntu-unity-version/">https://itsfoss.com/how-to-know-ubuntu-unity-version/</a></p><p>如何知道PPA的URL呢？在网络上简单搜索PPA的名称，如ppa:dr-akulavich/lighttable 并且你应该获得Launchpad网站的第一个结果，Launchpad是存储PPA的官方平台。在那你也能直接地去发布和搜索需要的PPA。</p><p>如果你没有核实并添加PPA，当你尝试去安装一个对你系统版本不可用的软件时，你可能看到一个错误：</p><blockquote><p>E: Unable to locate package</p></blockquote><p>更糟糕的是自从它被加入到你的<code>source.list</code>后，你每次运行软件更新（software updater），你将会看到一个错误：<a href="https://itsfoss.com/failed-to-download-repository-information-ubuntu-13-04/">Failed to download repository information</a></p><p>如果你在终端中运行<code>sudo apt update</code>命令，这可错误将会更详细地显示是哪一个库造成了这个问题。你能在输入命令后看到如下信息：</p><blockquote><p>W: Failed to fetch <a href="http://ppa.launchpad.net/venerix/pkg/ubuntu/dists/raring/main/binary-i386/Packages">http://ppa.launchpad.net/venerix/pkg/ubuntu/dists/raring/main/binary-i386/Packages</a>  404  Not Found<br>E: Some index files failed to download. They have been ignored, or old ones used instead.</p></blockquote><p>无需解释，明显是因为系统无法发现使用于你的版本的库。</p><p>还记得我们之前看到的库结构吗？APT将尝试在<code>http://ppa.launchpad.net/&lt;PPA_NAME&gt;/ubuntu/dists/Ubuntu_Version</code>这个位置寻找软件信息。</p><p>并且如果PPA对于指定版本是不可用的，他将永远不能打开这个URL，并且你会看到著名的404错误。</p><h2 id="为什么PPAs不是对所有的Ubuntu发行版都可用呢？"><a href="#为什么PPAs不是对所有的Ubuntu发行版都可用呢？" class="headerlink" title="为什么PPAs不是对所有的Ubuntu发行版都可用呢？"></a>为什么PPAs不是对所有的Ubuntu发行版都可用呢？</h2><p>这是因为有人必须编译这个软件并且在特定版本上创建PPA。考虑到每6个月发行一次Ubuntu版本，为每一个Ubuntu发行版更新PPA是一个烦人的任务。</p><h2 id="如果PPA对你的版本是不可用，那么该如何安装应用程序？"><a href="#如果PPA对你的版本是不可用，那么该如何安装应用程序？" class="headerlink" title="如果PPA对你的版本是不可用，那么该如何安装应用程序？"></a>如果PPA对你的版本是不可用，那么该如何安装应用程序？</h2><p>尽管PPA对你的版本是不可用的，那么安装程序也是可能的。你仍然可以下载DEB文件，然后安装这个应用程序。</p><p>假设你转到Light Table PPA页面。使用刚刚所学的PPA的知识，你了解到PPA是对你的Ubuntu版本不可用。</p><p>你能做的是点击<code>View package details’</code></p><p>在那，你能点击一个包去揭露更多详情信息。你也将发现源代码和DEB文件。</p><p>我建议使用<a href="https://itsfoss.com/gdebi-default-ubuntu-software-center/">using Gdebi to install these DEB files</a>而不是软件中心，因为Gdebi是比处理依赖要好的多。</p><p>请注意，这种方式安装的软件包可能不会在未来更新。</p><p>我认为你已经阅读了关于添加PPAs足够多的内容。如何一处PPA并且由它安装的软件呢？</p><h2 id="如何删除PPA？"><a href="#如何删除PPA？" class="headerlink" title="如何删除PPA？"></a>如何删除PPA？</h2><p>我曾经写了关于如何删除PPA，我在这也会描述一些方法。</p><p><a href="https://itsfoss.com/how-to-remove-or-delete-ppas-quick-tip/">https://itsfoss.com/how-to-remove-or-delete-ppas-quick-tip/</a></p><p>我建议你删除从PPA中安装的软件之前先删除PPA。如果你仅仅移除PPA，已安装的软件仍然在你的系统中，他不会获取任何更新。你不想这样，对吗？</p><p>因此问题来了，如何知道那个应用使用哪个PPA安装的呢？</p><h2 id="寻找由PPA安装的package并删除他们"><a href="#寻找由PPA安装的package并删除他们" class="headerlink" title="寻找由PPA安装的package并删除他们"></a>寻找由PPA安装的package并删除他们</h2><p>Ubuntu的软件中心不会帮助。你将必须使用Synaptic package manager，它有更多高级特性。</p><p>你能在Ubuntu上安装Synaptic，或者使用以下命令：</p><blockquote><p>sudo apt install synaptic</p></blockquote><p>安装后启动Synaptic package manager，并选择Origin。你将看到各种各样的加入到系统中的库。PPA条目以PPA为前缀。点击他们查看PPA可用的软件包。已安装的软件在它之前将会有适当的符号。</p><p>在你发现软件包之后，你能从Synaptic上删除他们。另外，你总是能使用这个命令：</p><blockquote><p>sudo apt remove package_name</p></blockquote><p>在你删除由PPA安装的软件包后，你能从你的<code>sources.list</code>中继续删除这个PPA。</p><h2 id="图形化地删除PPA"><a href="#图形化地删除PPA" class="headerlink" title="图形化地删除PPA"></a>图形化地删除PPA</h2><p>打开Software &amp; Updates，然后打开Other Software标签。寻找你要删除的PPA。</p><p>在这你有两个选项。要不取消选定PPA，要不你选择Remove选项。</p><p>两者不同的是当你取消选定PPA条目时，你的系统将在<code>/etc/apt/sources.list.d </code>目录下<code>ppa_name.list </code>文件中注释掉库条目，但是你选择Remove选项它就会从<code>/etc/apt/sources.list.d</code>目录下<code>ppa_name.list</code>文件中删除库条目。</p><p>这两种情况，<code>ppa_name.list</code>文件存在于那个目录中，即使它是空的。</p><h2 id="使用PPA安全吗？"><a href="#使用PPA安全吗？" class="headerlink" title="使用PPA安全吗？"></a>使用PPA安全吗？</h2><p>这是一个主观性的问题。纯粹主义者讨厌PPA，因为大多数情况下PPAs是来自与第三方开发者。但是与此同时，由于提供了一个更容易的安装选项，PPAs是在Debian/Ubuntu世界是受欢迎的。</p><p>就安全性而言，你使用PPA和Linux系统受到恶意软件的攻击或劫持是几乎不可能的。到目前为止，我想不起这种偶然事件曾经发生过。</p><p>官方PPAs能被使用，这无需多想。使用非官方PPA完全取决于你的决定。</p><p>根据经验，如果该程序需要sudo权限才能运行，则应避免通过第三方PPA安装该程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PPA-Persional-Package-Archive&quot;&gt;&lt;a href=&quot;#PPA-Persional-Package-Archive&quot; class=&quot;headerlink&quot; title=&quot;PPA(Persional Package Archive)&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://example.com/2021/01/03/Docker/"/>
    <id>http://example.com/2021/01/03/Docker/</id>
    <published>2021-01-03T08:13:14.000Z</published>
    <updated>2021-01-08T13:25:01.963Z</updated>
    
    <content type="html"><![CDATA[<p>Docker和虚拟机的不同：</p><ul><li>传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。</li><li>容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。</li><li>每个容器之间是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。</li></ul><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>使用方式：</p><blockquote><p>docker images [option] [repository[:TAG]]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world                      latest              bf756fb1ae65        12 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">只显示镜像ID</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images -q</span></span><br><span class="line">7c3ce33e4a1f</span><br><span class="line">ec3789272a09</span><br><span class="line">698ab9017c5b</span><br><span class="line">19d9cb152dda</span><br></pre></td></tr></table></figure><p>​<br>​       </p><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>镜像的仓库源</td></tr><tr><td>TAG</td><td>镜像的标签</td></tr><tr><td>IMAGE ID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像创建时间</td></tr><tr><td>SIZE</td><td>镜像的大小</td></tr></tbody></table><table><thead><tr><th>Option选项</th><th>描述</th></tr></thead><tbody><tr><td>–all , -a</td><td># 显示所有镜像 (default hides intermediate images)</td></tr><tr><td>–digests</td><td># Show digests</td></tr><tr><td>–filter , -f</td><td># Filter output based on conditions provided</td></tr><tr><td>–format</td><td># Pretty-print images using a Go template</td></tr><tr><td>–no-trunc</td><td>#Don’t truncate output</td></tr><tr><td>–quiet , -q</td><td># Only show image IDs</td></tr></tbody></table><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>使用方式：</p><blockquote><p>docker search [OPTION] TERM</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10339               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3832                [OK]                </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   757                                     [OK]</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索时添加过滤条件为STARS不小于3000</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker search mysql --filter=STARS=3000</span></span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   10339               [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3832                [OK]         </span><br></pre></td></tr></table></figure><h3 id="查看某个命令的可选项"><a href="#查看某个命令的可选项" class="headerlink" title="查看某个命令的可选项"></a>查看某个命令的可选项</h3><p>使用方式：</p><blockquote><p>docker [命令名称] –help</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage:docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show numeric IDs</span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>使用方式：</p><blockquote><p>docker pull [OPTION] NAME[:TAG|@DIGEST] </p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Pull complete  # 分层下载</span><br><span class="line">fedd960d3481: Pull complete </span><br><span class="line">7ab947313861: Pull complete </span><br><span class="line">64f92f19e638: Pull complete </span><br><span class="line">3e80b17bff96: Pull complete </span><br><span class="line">014e976799f9: Pull complete </span><br><span class="line">59ae84fee1b3: Pull complete </span><br><span class="line">ffe10de703ea: Pull complete </span><br><span class="line">657af6d90c83: Pull complete </span><br><span class="line">98bfb480322c: Pull complete </span><br><span class="line">6aa3859c4789: Pull complete </span><br><span class="line">1ed875d851ef: Pull complete </span><br><span class="line">Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br></pre></td></tr></table></figure><p>如果不写TAG，则默认下载最新的镜像。</p><p>以下两个命令等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull docker.io/library/mysql:latest</span></span><br></pre></td></tr></table></figure><p>指定版本下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Already exists </span><br><span class="line">fedd960d3481: Already exists </span><br><span class="line">7ab947313861: Already exists </span><br><span class="line">64f92f19e638: Already exists </span><br><span class="line">3e80b17bff96: Already exists </span><br><span class="line">014e976799f9: Already exists </span><br><span class="line">59ae84fee1b3: Already exists </span><br><span class="line">7d1da2a18e2e: Pull complete </span><br><span class="line">301a28b700b9: Downloading [============&gt;                                      ]  26.25MB/108.3MB</span><br><span class="line">529dc8dbeaf3: Download complete </span><br><span class="line">bc9d021dc13f: Download complete </span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>使用方式：</p><blockquote><p>docker rmi [OPTIONS] IMAGE [IMAGE…]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f 882aebcdb308</span></span><br><span class="line">Deleted: sha256:882aebcdb308cd2f1dc333c3fc1676614ea0bd9b4379d0bfdf5db55640e56e56</span><br><span class="line">Deleted: sha256:7da399cc68d63c6d3540bad15369c46e971443bc73981df585a7a37aefd3983a</span><br><span class="line">Deleted: sha256:b480ebcefedc620f17a24d5c61a336361c075db1aaf57e2a1de32b97f69eb3a4</span><br><span class="line">Deleted: sha256:957eb1ae5cf15a8089a9b19aaacbacdaf06fb5045d6fb2bb95c3c37961b09081</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除所有的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -aq)</span></span><br></pre></td></tr></table></figure><p>其中<code>$(docker images -aq)</code>为查询所有镜像的ID</p><h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><p>安装centos进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull centos</span></span><br></pre></td></tr></table></figure><h3 id="新建容器并运行"><a href="#新建容器并运行" class="headerlink" title="新建容器并运行"></a>新建容器并运行</h3><blockquote><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it  centos /bin/bash <span class="comment"># 运行并进入容器</span></span></span><br><span class="line">[root@fbddb27d188f /]# ls # 查看容器内的centos</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@fbddb27d188f /]# exit # 从容器退回主机</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><blockquote><p>docker ps [OPTIONS]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps <span class="comment"># 查看当前正在运行的容器</span></span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -all <span class="comment"># 列出当前运行的容器+查看曾经运行的容器</span></span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">fbddb27d188f        centos              &quot;/bin/bash&quot;         14 minutes ago      Exited (0) 3 minutes ago                       happy_kowalevski</span><br></pre></td></tr></table></figure><table><thead><tr><th>Option名称</th><th>描述</th></tr></thead><tbody><tr><td>-all, -a</td><td>显示所有容器</td></tr><tr><td>–last, -n</td><td>显示最近创建的n个容器</td></tr><tr><td>–quiet, -q</td><td>只显示容器的ID</td></tr></tbody></table><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>退出并关闭容器</p><blockquote><p>exit</p></blockquote><p>退出但不关闭容器</p><blockquote><p>Ctrl + P + Q</p></blockquote><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>使用方式：</p><blockquote><p>docker rm [OPTIONS] CONTAINER [CONTAINER…]</p></blockquote><table><thead><tr><th>Option选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--force , -f</code></td><td>Force the removal of a running container (uses SIGKILL)</td></tr><tr><td><code>--link , -l</code></td><td>Remove the specified link</td></tr><tr><td><code>--volumes , -v</code></td><td>Remove anonymous volumes associated with the container</td></tr></tbody></table><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm fbddb27d188f</span></span><br><span class="line">fbddb27d188f</span><br></pre></td></tr></table></figure><p><strong>启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>强制停止当前容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> [容器ID]</span></span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d centos</span></span><br><span class="line">f3cc16b38e9dc3e281681f226128b3f084aec79b9d9c27721a83f36189fdaebc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lize @ lize-linux <span class="keyword">in</span> ~ [21:15:59]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span>           </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lize @ lize-linux <span class="keyword">in</span> ~ [21:16:04]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -all</span>      </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f3cc16b38e9d        centos              &quot;/bin/bash&quot;         12 seconds ago      Exited (0) 11 seconds ago                       elegant_archimedes</span><br></pre></td></tr></table></figure><p><code>docker run -d centos</code>中的-d表示后台运行，但是该后台运行必须对应一个前台进程，否则docker会将这个容器停止。</p><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -tf --tail 10 [容器ID]</span></span><br></pre></td></tr></table></figure><p><code>-tf</code>表示显示日志， <code>--tail [数字]</code>表示要显示日志条数。</p><p><strong>查看容器内部进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top [容器ID]</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top 8326642ceb7d</span>        </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                20286               20264               0                   21:46               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看容器的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it [容器ID] bashshell</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach [容器ID]</span></span><br></pre></td></tr></table></figure><p>两者区别：<code>docker exec </code>在进入容器后开启一个新的终端，<code>docker attach </code>在进入容器后使用正在执行的一个终端。</p><p><strong>将容器内部的文件拷贝到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp [容器ID]:[容器中的文件路径] [主机文件夹路径]</span></span><br></pre></td></tr></table></figure><p>![](/home/lize/Pictures/Screenshot from 2021-01-05 23-14-52.png)</p><h2 id="作业1：docker部署nginx"><a href="#作业1：docker部署nginx" class="headerlink" title="作业1：docker部署nginx"></a>作业1：docker部署nginx</h2><p>docker部署nginx并完成端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">f358c945ae0eed75160c006a0a3fac73028c9aa73f1ed2b87e6c12d708aa17fe</span><br></pre></td></tr></table></figure><h2 id="作业2：docker部署tomcat"><a href="#作业2：docker部署tomcat" class="headerlink" title="作业2：docker部署tomcat"></a>作业2：docker部署tomcat</h2><p>官方使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --rm tomcat</span></span><br></pre></td></tr></table></figure><p><code>--rm</code>表示停止容器后将无法查询到该容器，先在本地镜像中寻找tomcat，本地镜像没有则去docker 仓库下载。</p><p>后台运行tomcat：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d  -p 3355:8080 --name tomcat01 tomcat</span></span><br></pre></td></tr></table></figure><p>但是访问localhost:3355出现404,这是因为tomcat中的webapps目录中没有任何项目。</p><p>将webapps.dist中的项目复制到webapps中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@8be6bf1b1aa5:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br></pre></td></tr></table></figure><p>再次访问localhost:3355则出现tomcat欢迎界面。</p><h2 id="Docker可视化界面"><a href="#Docker可视化界面" class="headerlink" title="Docker可视化界面"></a>Docker可视化界面</h2><p>portainer是Docker图形化界面管理工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8088:9000 \</span></span><br><span class="line"><span class="bash">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span></span><br></pre></td></tr></table></figure><p>访问测试：localhost:8088</p><h2 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>如何得到镜像：</p><ul><li>从远程仓库下载</li><li>从朋友处拷贝</li><li>自己制作一个镜像Dockerfile</li></ul><h2 id="Commit命令"><a href="#Commit命令" class="headerlink" title="Commit命令"></a>Commit命令</h2><p>将现有容器打包成镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it tomcat /bin/bash</span></span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# cd webapps</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat/webapps# </span><br></pre></td></tr></table></figure><p>docker提供的tomcat镜像中的webapps目录下没有项目。</p><p>将webapp.dist目录中的项目复制到webapps目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat# cd webapps</span><br><span class="line">root@cdcbb2f5b3aa:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure><p>将该容器打包成镜像：</p><p>使用方式：</p><blockquote><p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker commit -a=<span class="string">&quot;lize&quot;</span> -m=<span class="string">&quot;add webapps apps&quot;</span> 53b95fab247a tomcat01:1.0</span></span><br></pre></td></tr></table></figure><p><code>-a</code>表示作者，<code>-m</code>表示提交的描述信息</p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><p>使用方式：</p><blockquote><p>$ docker run -it -v [主机目录]:[容器内目录] 容器 /bin/bash</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v /home/<span class="built_in">test</span>:/home centos /bin/bash</span></span><br></pre></td></tr></table></figure><p>实战：</p><p>将mysql配置目录和数据目录与主机目录进行双向绑定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql</span></span><br><span class="line">da57dd0c24e10ccec927594c1c5adc83a5ae60207697cd8a2d73ed0a9b777059</span><br></pre></td></tr></table></figure><blockquote><p>-d 后台运行</p><p>-p 端口映射</p><p>-v 数据卷挂载</p><p>-e 环境配置</p><p>–name 容器名字</p></blockquote><p>上面这条命令完成了以下操作：</p><ul><li>在后台运行mysql</li><li>将主机3310端口映射到此容器的3306端口</li><li>将主机/home/mysql/conf目录与容器中的etc/mysql/conf.d目录双向绑定</li><li>将主机/home/mysql/data目录与容器中的/var/lib/mysql目录双向绑定</li><li>配置mysql的密码为123456</li><li>容器的名称为mysql01</li></ul><p>在主机上使用mysql workbench连接localhost:3310，如果连接成功，这就表示端口映射成功。然后使用mysql workbench创建一个名称为test的数据库，在主机的/home/mysql/data目录查看，发现多出一个test目录，并且数据卷挂载成功！</p><p>容器删除后，test目录将依旧存在。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker和虚拟机的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。&lt;/li&gt;
&lt;li&gt;容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。&lt;/li&gt;
&lt;li&gt;每个容器</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CodeLite调试时查看数组内容</title>
    <link href="http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/"/>
    <id>http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/</id>
    <published>2021-01-03T04:04:33.000Z</published>
    <updated>2021-01-03T04:06:18.056Z</updated>
    
    <content type="html"><![CDATA[<p>添加监视的变量名为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(int[10]*)a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;添加监视的变量名为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co</summary>
      
    
    
    
    
    <category term="CodeLite" scheme="http://example.com/tags/CodeLite/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c++环境</title>
    <link href="http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-02T09:52:52.000Z</published>
    <updated>2021-01-02T10:09:52.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode配置c-环境"><a href="#vscode配置c-环境" class="headerlink" title="vscode配置c++环境"></a>vscode配置c++环境</h1><h2 id="1-配置c-IntelliSense"><a href="#1-配置c-IntelliSense" class="headerlink" title="1.配置c++ IntelliSense"></a>1.配置c++ IntelliSense</h2><p>使用<code>F1</code> 快捷键打开命令选项，输入<code>C/C++:Edit configuration</code>，然后在<code>.vscode</code>文件夹自动生成<code>c_cpp_properties.json</code>配置文件。</p><h2 id="2-launch-json配置文件"><a href="#2-launch-json配置文件" class="headerlink" title="2.launch.json配置文件"></a>2.launch.json配置文件</h2><p>在debug界面中添加配置，然后选<code>c++(gdb/lgdb)</code>选项，然后自动生成<code>launch.json</code>配置文件，该配置文件主要用于调试时的加载控制。</p><h2 id="3-tasks-json配置文件"><a href="#3-tasks-json配置文件" class="headerlink" title="3.tasks.json配置文件"></a>3.tasks.json配置文件</h2><p>在命令窗口中输入task，选择<code>task:configure task</code>选项，生成<code>task.json</code>配置文件。</p><p>注意：<code>task.json</code>中的<code>label</code>属性值要和<code>launch.json</code>中<code>preLaunchTask</code>属性值相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vscode配置c-环境&quot;&gt;&lt;a href=&quot;#vscode配置c-环境&quot; class=&quot;headerlink&quot; title=&quot;vscode配置c++环境&quot;&gt;&lt;/a&gt;vscode配置c++环境&lt;/h1&gt;&lt;h2 id=&quot;1-配置c-IntelliSense&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/01/hello-world/"/>
    <id>http://example.com/2021/01/01/hello-world/</id>
    <published>2021-01-01T07:22:59.521Z</published>
    <updated>2021-01-08T13:56:00.737Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><div class="alert alert-success">成功啦o(*￣▽￣*)ブ</div><div class="alert alert-danger">有危险Σ(っ °Д °;)っ</div><div class="alert alert-info">有消息(・∀・(・∀・(・∀・*)</div><div class="alert alert-warning">当心哦≧ ﹏ ≦</div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>折叠框的标题</span></div>    <div class="xContent"><div class="inner">        <p>被折叠的内容 1<br>被折叠的内容 2<br>…</p>     </div></div>    </div><div class="panel panel-TYPE">    <div class="panel-title">面板框的标题</div>    <div class="panel-body">        <p>面板里的内容 1<br>面板里的内容 2<br>…</p>    </div>    </div><p>TYPE是面板框的类型，可以是：</p><pre><code>successsdangerinfowarning</code></pre><p><font color='red'>test </font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
