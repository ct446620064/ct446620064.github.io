<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小泽のブログ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-05T15:56:45.680Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>realxz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://example.com/2021/01/03/Docker/"/>
    <id>http://example.com/2021/01/03/Docker/</id>
    <published>2021-01-03T08:13:14.000Z</published>
    <updated>2021-01-05T15:56:45.680Z</updated>
    
    <content type="html"><![CDATA[<p>Docker和虚拟机的不同：</p><ul><li>传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。</li><li>容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。</li><li>每个容器之间是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。</li></ul><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>使用方式：</p><blockquote><p>docker images [option] [repository[:TAG]]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world                      latest              bf756fb1ae65        12 months ago       13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">只显示镜像ID</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images -q</span></span><br><span class="line">7c3ce33e4a1f</span><br><span class="line">ec3789272a09</span><br><span class="line">698ab9017c5b</span><br><span class="line">19d9cb152dda</span><br></pre></td></tr></table></figure><p>​<br>​       </p><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>镜像的仓库源</td></tr><tr><td>TAG</td><td>镜像的标签</td></tr><tr><td>IMAGE ID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像创建时间</td></tr><tr><td>SIZE</td><td>镜像的大小</td></tr></tbody></table><table><thead><tr><th>Option选项</th><th>描述</th></tr></thead><tbody><tr><td>–all , -a</td><td># 显示所有镜像 (default hides intermediate images)</td></tr><tr><td>–digests</td><td># Show digests</td></tr><tr><td>–filter , -f</td><td># Filter output based on conditions provided</td></tr><tr><td>–format</td><td># Pretty-print images using a Go template</td></tr><tr><td>–no-trunc</td><td>#Don’t truncate output</td></tr><tr><td>–quiet , -q</td><td># Only show image IDs</td></tr></tbody></table><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>使用方式：</p><blockquote><p>docker search [OPTION] TERM</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10339               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3832                [OK]                </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   757                                     [OK]</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索时添加过滤条件为STARS不小于3000</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker search mysql --filter=STARS=3000</span></span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   10339               [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3832                [OK]         </span><br></pre></td></tr></table></figure><h3 id="查看某个命令的可选项"><a href="#查看某个命令的可选项" class="headerlink" title="查看某个命令的可选项"></a>查看某个命令的可选项</h3><p>使用方式：</p><blockquote><p>docker [命令名称] –help</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images --<span class="built_in">help</span></span></span><br><span class="line"></span><br><span class="line">Usage:docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show numeric IDs</span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>使用方式：</p><blockquote><p>docker pull [OPTION] NAME[:TAG|@DIGEST] </p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Pull complete  # 分层下载</span><br><span class="line">fedd960d3481: Pull complete </span><br><span class="line">7ab947313861: Pull complete </span><br><span class="line">64f92f19e638: Pull complete </span><br><span class="line">3e80b17bff96: Pull complete </span><br><span class="line">014e976799f9: Pull complete </span><br><span class="line">59ae84fee1b3: Pull complete </span><br><span class="line">ffe10de703ea: Pull complete </span><br><span class="line">657af6d90c83: Pull complete </span><br><span class="line">98bfb480322c: Pull complete </span><br><span class="line">6aa3859c4789: Pull complete </span><br><span class="line">1ed875d851ef: Pull complete </span><br><span class="line">Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br></pre></td></tr></table></figure><p>如果不写TAG，则默认下载最新的镜像。</p><p>以下两个命令等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull docker.io/library/mysql:latest</span></span><br></pre></td></tr></table></figure><p>指定版本下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Already exists </span><br><span class="line">fedd960d3481: Already exists </span><br><span class="line">7ab947313861: Already exists </span><br><span class="line">64f92f19e638: Already exists </span><br><span class="line">3e80b17bff96: Already exists </span><br><span class="line">014e976799f9: Already exists </span><br><span class="line">59ae84fee1b3: Already exists </span><br><span class="line">7d1da2a18e2e: Pull complete </span><br><span class="line">301a28b700b9: Downloading [============&gt;                                      ]  26.25MB/108.3MB</span><br><span class="line">529dc8dbeaf3: Download complete </span><br><span class="line">bc9d021dc13f: Download complete </span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>使用方式：</p><blockquote><p>docker rmi [OPTIONS] IMAGE [IMAGE…]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f 882aebcdb308</span></span><br><span class="line">Deleted: sha256:882aebcdb308cd2f1dc333c3fc1676614ea0bd9b4379d0bfdf5db55640e56e56</span><br><span class="line">Deleted: sha256:7da399cc68d63c6d3540bad15369c46e971443bc73981df585a7a37aefd3983a</span><br><span class="line">Deleted: sha256:b480ebcefedc620f17a24d5c61a336361c075db1aaf57e2a1de32b97f69eb3a4</span><br><span class="line">Deleted: sha256:957eb1ae5cf15a8089a9b19aaacbacdaf06fb5045d6fb2bb95c3c37961b09081</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除所有的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -aq)</span></span><br></pre></td></tr></table></figure><p>其中<code>$(docker images -aq)</code>为查询所有镜像的ID</p><h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><p>安装centos进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull centos</span></span><br></pre></td></tr></table></figure><h3 id="新建容器并运行"><a href="#新建容器并运行" class="headerlink" title="新建容器并运行"></a>新建容器并运行</h3><blockquote><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it  centos /bin/bash <span class="comment"># 运行并进入容器</span></span></span><br><span class="line">[root@fbddb27d188f /]# ls # 查看容器内的centos</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@fbddb27d188f /]# exit # 从容器退回主机</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><blockquote><p>docker ps [OPTIONS]</p></blockquote><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps <span class="comment"># 查看当前正在运行的容器</span></span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -all <span class="comment"># 列出当前运行的容器+查看曾经运行的容器</span></span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">fbddb27d188f        centos              &quot;/bin/bash&quot;         14 minutes ago      Exited (0) 3 minutes ago                       happy_kowalevski</span><br></pre></td></tr></table></figure><table><thead><tr><th>Option名称</th><th>描述</th></tr></thead><tbody><tr><td>-all, -a</td><td>显示所有容器</td></tr><tr><td>–last, -n</td><td>显示最近创建的n个容器</td></tr><tr><td>–quiet, -q</td><td>只显示容器的ID</td></tr></tbody></table><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>退出并关闭容器</p><blockquote><p>exit</p></blockquote><p>退出但不关闭容器</p><blockquote><p>Ctrl + P + Q</p></blockquote><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>使用方式：</p><blockquote><p>docker rm [OPTIONS] CONTAINER [CONTAINER…]</p></blockquote><table><thead><tr><th>Option选项</th><th>描述</th></tr></thead><tbody><tr><td><code>--force , -f</code></td><td>Force the removal of a running container (uses SIGKILL)</td></tr><tr><td><code>--link , -l</code></td><td>Remove the specified link</td></tr><tr><td><code>--volumes , -v</code></td><td>Remove anonymous volumes associated with the container</td></tr></tbody></table><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm fbddb27d188f</span></span><br><span class="line">fbddb27d188f</span><br></pre></td></tr></table></figure><p><strong>启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker restart [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>停止容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>强制停止当前容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> [容器ID]</span></span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d centos</span></span><br><span class="line">f3cc16b38e9dc3e281681f226128b3f084aec79b9d9c27721a83f36189fdaebc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lize @ lize-linux <span class="keyword">in</span> ~ [21:15:59]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span>           </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lize @ lize-linux <span class="keyword">in</span> ~ [21:16:04]</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -all</span>      </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f3cc16b38e9d        centos              &quot;/bin/bash&quot;         12 seconds ago      Exited (0) 11 seconds ago                       elegant_archimedes</span><br></pre></td></tr></table></figure><p><code>docker run -d centos</code>中的-d表示后台运行，但是该后台运行必须对应一个前台进程，否则docker会将这个容器停止。</p><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -tf --tail 10 [容器ID]</span></span><br></pre></td></tr></table></figure><p><code>-tf</code>表示显示日志， <code>--tail [数字]</code>表示要显示日志条数。</p><p><strong>查看容器内部进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top [容器ID]</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top 8326642ceb7d</span>        </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                20286               20264               0                   21:46               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><p><strong>查看容器的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect [容器ID]</span></span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it [容器ID] bashshell</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker attach [容器ID]</span></span><br></pre></td></tr></table></figure><p>两者区别：<code>docker exec </code>在进入容器后开启一个新的终端，<code>docker attach </code>在进入容器后使用正在执行的一个终端。</p><p><strong>将容器内部的文件拷贝到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp [容器ID]:[容器中的文件路径] [主机文件夹路径]</span></span><br></pre></td></tr></table></figure><p>![](/home/lize/Pictures/Screenshot from 2021-01-05 23-14-52.png)</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>docker部署nginx并完成端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">f358c945ae0eed75160c006a0a3fac73028c9aa73f1ed2b87e6c12d708aa17fe</span><br></pre></td></tr></table></figure><p>端口映射原理：</p><p><img src="/home/lize/ct446620064.github.io/source/_posts/images/docker01.png"></p><p>访问测试：</p><p><img src="/home/lize/ct446620064.github.io/source/_posts/images/docker02.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker和虚拟机的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统虚拟机，虚拟出一套硬件，在硬件之上运行一个完整的操作系统，然后在操作系统上安装和运行软件。&lt;/li&gt;
&lt;li&gt;容器内的应用直接运行在宿主机的内核上，容器没有自己的内核，也没有虚拟出硬件。&lt;/li&gt;
&lt;li&gt;每个容器</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CodeLite调试时查看数组内容</title>
    <link href="http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/"/>
    <id>http://example.com/2021/01/03/CodeLite%E8%B0%83%E8%AF%95%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E7%BB%84%E5%86%85%E5%AE%B9/</id>
    <published>2021-01-03T04:04:33.000Z</published>
    <updated>2021-01-03T04:06:18.056Z</updated>
    
    <content type="html"><![CDATA[<p>添加监视的变量名为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(int[10]*)a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;添加监视的变量名为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co</summary>
      
    
    
    
    
    <category term="CodeLite" scheme="http://example.com/tags/CodeLite/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c++环境</title>
    <link href="http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2021/01/02/vscode%E9%85%8D%E7%BD%AEc-%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-02T09:52:52.000Z</published>
    <updated>2021-01-02T10:09:52.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode配置c-环境"><a href="#vscode配置c-环境" class="headerlink" title="vscode配置c++环境"></a>vscode配置c++环境</h1><h2 id="1-配置c-IntelliSense"><a href="#1-配置c-IntelliSense" class="headerlink" title="1.配置c++ IntelliSense"></a>1.配置c++ IntelliSense</h2><p>使用<code>F1</code> 快捷键打开命令选项，输入<code>C/C++:Edit configuration</code>，然后在<code>.vscode</code>文件夹自动生成<code>c_cpp_properties.json</code>配置文件。</p><h2 id="2-launch-json配置文件"><a href="#2-launch-json配置文件" class="headerlink" title="2.launch.json配置文件"></a>2.launch.json配置文件</h2><p>在debug界面中添加配置，然后选<code>c++(gdb/lgdb)</code>选项，然后自动生成<code>launch.json</code>配置文件，该配置文件主要用于调试时的加载控制。</p><h2 id="3-tasks-json配置文件"><a href="#3-tasks-json配置文件" class="headerlink" title="3.tasks.json配置文件"></a>3.tasks.json配置文件</h2><p>在命令窗口中输入task，选择<code>task:configure task</code>选项，生成<code>task.json</code>配置文件。</p><p>注意：<code>task.json</code>中的<code>label</code>属性值要和<code>launch.json</code>中<code>preLaunchTask</code>属性值相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vscode配置c-环境&quot;&gt;&lt;a href=&quot;#vscode配置c-环境&quot; class=&quot;headerlink&quot; title=&quot;vscode配置c++环境&quot;&gt;&lt;/a&gt;vscode配置c++环境&lt;/h1&gt;&lt;h2 id=&quot;1-配置c-IntelliSense&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>article3</title>
    <link href="http://example.com/2021/01/02/article/index/"/>
    <id>http://example.com/2021/01/02/article/index/</id>
    <published>2021-01-02T07:44:44.000Z</published>
    <updated>2021-01-02T07:45:32.391Z</updated>
    
    <content type="html"><![CDATA[<p>new 了一个layout为page的文章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;new 了一个layout为page的文章&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/01/hello-world/"/>
    <id>http://example.com/2021/01/01/hello-world/</id>
    <published>2021-01-01T07:22:59.521Z</published>
    <updated>2021-01-01T07:22:59.521Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
